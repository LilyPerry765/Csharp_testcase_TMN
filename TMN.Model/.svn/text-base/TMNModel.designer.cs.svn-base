#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.233
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMN
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TMN.Classic")]
	public abstract partial class TMNDataContextBase : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAcknowledgeCenter(AcknowledgeCenter instance);
    partial void UpdateAcknowledgeCenter(AcknowledgeCenter instance);
    partial void DeleteAcknowledgeCenter(AcknowledgeCenter instance);
    partial void InsertUserShift(UserShift instance);
    partial void UpdateUserShift(UserShift instance);
    partial void DeleteUserShift(UserShift instance);
    partial void InsertAlarm(Alarm instance);
    partial void UpdateAlarm(Alarm instance);
    partial void DeleteAlarm(Alarm instance);
    partial void InsertAlarmSeverityOverride(AlarmSeverityOverride instance);
    partial void UpdateAlarmSeverityOverride(AlarmSeverityOverride instance);
    partial void DeleteAlarmSeverityOverride(AlarmSeverityOverride instance);
    partial void InsertAlarmType(AlarmType instance);
    partial void UpdateAlarmType(AlarmType instance);
    partial void DeleteAlarmType(AlarmType instance);
    partial void InsertCard(Card instance);
    partial void UpdateCard(Card instance);
    partial void DeleteCard(Card instance);
    partial void InsertCardType(CardType instance);
    partial void UpdateCardType(CardType instance);
    partial void DeleteCardType(CardType instance);
    partial void InsertCenter(Center instance);
    partial void UpdateCenter(Center instance);
    partial void DeleteCenter(Center instance);
    partial void InsertCenterInMap(CenterInMap instance);
    partial void UpdateCenterInMap(CenterInMap instance);
    partial void DeleteCenterInMap(CenterInMap instance);
    partial void InsertCenterLink(CenterLink instance);
    partial void UpdateCenterLink(CenterLink instance);
    partial void DeleteCenterLink(CenterLink instance);
    partial void InsertChannel(Channel instance);
    partial void UpdateChannel(Channel instance);
    partial void DeleteChannel(Channel instance);
    partial void InsertCircuitInMap(CircuitInMap instance);
    partial void UpdateCircuitInMap(CircuitInMap instance);
    partial void DeleteCircuitInMap(CircuitInMap instance);
    partial void InsertCircuitLink(CircuitLink instance);
    partial void UpdateCircuitLink(CircuitLink instance);
    partial void DeleteCircuitLink(CircuitLink instance);
    partial void InsertDDF(DDF instance);
    partial void UpdateDDF(DDF instance);
    partial void DeleteDDF(DDF instance);
    partial void InsertDest(Dest instance);
    partial void UpdateDest(Dest instance);
    partial void DeleteDest(Dest instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventType(EventType instance);
    partial void UpdateEventType(EventType instance);
    partial void DeleteEventType(EventType instance);
    partial void InsertFailureReason(FailureReason instance);
    partial void UpdateFailureReason(FailureReason instance);
    partial void DeleteFailureReason(FailureReason instance);
    partial void InsertInstruction(Instruction instance);
    partial void UpdateInstruction(Instruction instance);
    partial void DeleteInstruction(Instruction instance);
    partial void InsertLink(Link instance);
    partial void UpdateLink(Link instance);
    partial void DeleteLink(Link instance);
    partial void InsertLongRecord(LongRecord instance);
    partial void UpdateLongRecord(LongRecord instance);
    partial void DeleteLongRecord(LongRecord instance);
    partial void InsertOPM(OPM instance);
    partial void UpdateOPM(OPM instance);
    partial void DeleteOPM(OPM instance);
    partial void InsertPermission(Permission instance);
    partial void UpdatePermission(Permission instance);
    partial void DeletePermission(Permission instance);
    partial void InsertRack(Rack instance);
    partial void UpdateRack(Rack instance);
    partial void DeleteRack(Rack instance);
    partial void InsertRackShelf(RackShelf instance);
    partial void UpdateRackShelf(RackShelf instance);
    partial void DeleteRackShelf(RackShelf instance);
    partial void InsertRackType(RackType instance);
    partial void UpdateRackType(RackType instance);
    partial void DeleteRackType(RackType instance);
    partial void InsertRegion(Region instance);
    partial void UpdateRegion(Region instance);
    partial void DeleteRegion(Region instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertReportItem(ReportItem instance);
    partial void UpdateReportItem(ReportItem instance);
    partial void DeleteReportItem(ReportItem instance);
    partial void InsertReportType(ReportType instance);
    partial void UpdateReportType(ReportType instance);
    partial void DeleteReportType(ReportType instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRolePermission(RolePermission instance);
    partial void UpdateRolePermission(RolePermission instance);
    partial void DeleteRolePermission(RolePermission instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertRoute(Route instance);
    partial void UpdateRoute(Route instance);
    partial void DeleteRoute(Route instance);
    partial void InsertSensor(Sensor instance);
    partial void UpdateSensor(Sensor instance);
    partial void DeleteSensor(Sensor instance);
    partial void InsertSensorData(SensorData instance);
    partial void UpdateSensorData(SensorData instance);
    partial void DeleteSensorData(SensorData instance);
    partial void InsertServiceState(ServiceState instance);
    partial void UpdateServiceState(ServiceState instance);
    partial void DeleteServiceState(ServiceState instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertShelf(Shelf instance);
    partial void UpdateShelf(Shelf instance);
    partial void DeleteShelf(Shelf instance);
    partial void InsertShelfCardType(ShelfCardType instance);
    partial void UpdateShelfCardType(ShelfCardType instance);
    partial void DeleteShelfCardType(ShelfCardType instance);
    partial void InsertShelfType(ShelfType instance);
    partial void UpdateShelfType(ShelfType instance);
    partial void DeleteShelfType(ShelfType instance);
    partial void InsertShift(Shift instance);
    partial void UpdateShift(Shift instance);
    partial void DeleteShift(Shift instance);
    partial void InsertSpareCard(SpareCard instance);
    partial void UpdateSpareCard(SpareCard instance);
    partial void DeleteSpareCard(SpareCard instance);
    partial void InsertSwitchType(SwitchType instance);
    partial void UpdateSwitchType(SwitchType instance);
    partial void DeleteSwitchType(SwitchType instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTaskType(TaskType instance);
    partial void UpdateTaskType(TaskType instance);
    partial void DeleteTaskType(TaskType instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUserRoleRelation(UserRoleRelation instance);
    partial void UpdateUserRoleRelation(UserRoleRelation instance);
    partial void DeleteUserRoleRelation(UserRoleRelation instance);
    partial void InsertCenterContact(CenterContact instance);
    partial void UpdateCenterContact(CenterContact instance);
    partial void DeleteCenterContact(CenterContact instance);
    partial void InsertLogAlarm(LogAlarm instance);
    partial void UpdateLogAlarm(LogAlarm instance);
    partial void DeleteLogAlarm(LogAlarm instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertUserLog(UserLog instance);
    partial void UpdateUserLog(UserLog instance);
    partial void DeleteUserLog(UserLog instance);
    #endregion
		
		public TMNDataContextBase() : 
				base(global::TMN.Properties.Settings.Default.TMN_ClassicConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TMNDataContextBase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TMNDataContextBase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TMNDataContextBase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TMNDataContextBase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AcknowledgeCenter> AcknowledgeCenters
		{
			get
			{
				return this.GetTable<AcknowledgeCenter>();
			}
		}
		
		public System.Data.Linq.Table<UserShift> UserShifts
		{
			get
			{
				return this.GetTable<UserShift>();
			}
		}
		
		public System.Data.Linq.Table<Alarm> Alarms
		{
			get
			{
				return this.GetTable<Alarm>();
			}
		}
		
		public System.Data.Linq.Table<AlarmSeverityOverride> AlarmSeverityOverrides
		{
			get
			{
				return this.GetTable<AlarmSeverityOverride>();
			}
		}
		
		public System.Data.Linq.Table<AlarmType> AlarmTypes
		{
			get
			{
				return this.GetTable<AlarmType>();
			}
		}
		
		public System.Data.Linq.Table<Card> Cards
		{
			get
			{
				return this.GetTable<Card>();
			}
		}
		
		public System.Data.Linq.Table<CardType> CardTypes
		{
			get
			{
				return this.GetTable<CardType>();
			}
		}
		
		public System.Data.Linq.Table<Center> Centers
		{
			get
			{
				return this.GetTable<Center>();
			}
		}
		
		public System.Data.Linq.Table<CenterInMap> CenterInMaps
		{
			get
			{
				return this.GetTable<CenterInMap>();
			}
		}
		
		public System.Data.Linq.Table<CenterLink> CenterLinks
		{
			get
			{
				return this.GetTable<CenterLink>();
			}
		}
		
		public System.Data.Linq.Table<Channel> Channels
		{
			get
			{
				return this.GetTable<Channel>();
			}
		}
		
		public System.Data.Linq.Table<CircuitInMap> CircuitInMaps
		{
			get
			{
				return this.GetTable<CircuitInMap>();
			}
		}
		
		public System.Data.Linq.Table<CircuitLink> CircuitLinks
		{
			get
			{
				return this.GetTable<CircuitLink>();
			}
		}
		
		public System.Data.Linq.Table<DDF> DDFs
		{
			get
			{
				return this.GetTable<DDF>();
			}
		}
		
		public System.Data.Linq.Table<Dest> Dests
		{
			get
			{
				return this.GetTable<Dest>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventType> EventTypes
		{
			get
			{
				return this.GetTable<EventType>();
			}
		}
		
		public System.Data.Linq.Table<FailureReason> FailureReasons
		{
			get
			{
				return this.GetTable<FailureReason>();
			}
		}
		
		public System.Data.Linq.Table<Instruction> Instructions
		{
			get
			{
				return this.GetTable<Instruction>();
			}
		}
		
		public System.Data.Linq.Table<Link> Links
		{
			get
			{
				return this.GetTable<Link>();
			}
		}
		
		public System.Data.Linq.Table<LongRecord> LongRecords
		{
			get
			{
				return this.GetTable<LongRecord>();
			}
		}
		
		public System.Data.Linq.Table<OPM> OPMs
		{
			get
			{
				return this.GetTable<OPM>();
			}
		}
		
		public System.Data.Linq.Table<Permission> Permissions
		{
			get
			{
				return this.GetTable<Permission>();
			}
		}
		
		public System.Data.Linq.Table<Rack> Racks
		{
			get
			{
				return this.GetTable<Rack>();
			}
		}
		
		public System.Data.Linq.Table<RackShelf> RackShelfs
		{
			get
			{
				return this.GetTable<RackShelf>();
			}
		}
		
		public System.Data.Linq.Table<RackType> RackTypes
		{
			get
			{
				return this.GetTable<RackType>();
			}
		}
		
		public System.Data.Linq.Table<Region> Regions
		{
			get
			{
				return this.GetTable<Region>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<ReportItem> ReportItems
		{
			get
			{
				return this.GetTable<ReportItem>();
			}
		}
		
		public System.Data.Linq.Table<ReportType> ReportTypes
		{
			get
			{
				return this.GetTable<ReportType>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<RolePermission> RolePermissions
		{
			get
			{
				return this.GetTable<RolePermission>();
			}
		}
		
		public System.Data.Linq.Table<Room> Rooms
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Route> Routes
		{
			get
			{
				return this.GetTable<Route>();
			}
		}
		
		public System.Data.Linq.Table<Sensor> Sensors
		{
			get
			{
				return this.GetTable<Sensor>();
			}
		}
		
		public System.Data.Linq.Table<SensorData> SensorDatas
		{
			get
			{
				return this.GetTable<SensorData>();
			}
		}
		
		public System.Data.Linq.Table<ServiceState> ServiceStates
		{
			get
			{
				return this.GetTable<ServiceState>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<Shelf> Shelfs
		{
			get
			{
				return this.GetTable<Shelf>();
			}
		}
		
		public System.Data.Linq.Table<ShelfCardType> ShelfCardTypes
		{
			get
			{
				return this.GetTable<ShelfCardType>();
			}
		}
		
		public System.Data.Linq.Table<ShelfType> ShelfTypes
		{
			get
			{
				return this.GetTable<ShelfType>();
			}
		}
		
		public System.Data.Linq.Table<Shift> Shifts
		{
			get
			{
				return this.GetTable<Shift>();
			}
		}
		
		public System.Data.Linq.Table<SpareCard> SpareCards
		{
			get
			{
				return this.GetTable<SpareCard>();
			}
		}
		
		public System.Data.Linq.Table<SwitchType> SwitchTypes
		{
			get
			{
				return this.GetTable<SwitchType>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<TaskType> TaskTypes
		{
			get
			{
				return this.GetTable<TaskType>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UserRoleRelation> UserRoleRelations
		{
			get
			{
				return this.GetTable<UserRoleRelation>();
			}
		}
		
		public System.Data.Linq.Table<CenterContact> CenterContacts
		{
			get
			{
				return this.GetTable<CenterContact>();
			}
		}
		
		public System.Data.Linq.Table<LogAlarm> LogAlarms
		{
			get
			{
				return this.GetTable<LogAlarm>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<UserLog> UserLogs
		{
			get
			{
				return this.GetTable<UserLog>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetDate", IsComposable=true)]
		public System.Nullable<System.DateTime> GetDate()
		{
			return ((System.Nullable<System.DateTime>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetInActiveSensors", IsComposable=true)]
		public IQueryable<GetInActiveSensorsResult> GetInActiveSensors([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> recentHours)
		{
			return this.CreateMethodCallQuery<GetInActiveSensorsResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), recentHours);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AcknowledgeCenter")]
	public partial class AcknowledgeCenter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CenterID;
		
		private string _Comment;
		
		private System.DateTime _Time;
		
		private System.Guid _Creator;
		
		private string _IPStation;
		
		private EntityRef<Center> _Center;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCenterIDChanging(System.Guid value);
    partial void OnCenterIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnCreatorChanging(System.Guid value);
    partial void OnCreatorChanged();
    partial void OnIPStationChanging(string value);
    partial void OnIPStationChanged();
    #endregion
		
		public AcknowledgeCenter()
		{
			this._Center = default(EntityRef<Center>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if ((this._Center.HasLoadedOrAssignedValue || this._User.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creator", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPStation", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string IPStation
		{
			get
			{
				return this._IPStation;
			}
			set
			{
				if ((this._IPStation != value))
				{
					this.OnIPStationChanging(value);
					this.SendPropertyChanging();
					this._IPStation = value;
					this.SendPropertyChanged("IPStation");
					this.OnIPStationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_AcknowledgeCenter", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.AcknowledgeCenter = null;
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.AcknowledgeCenter = this;
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(System.Guid);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AcknowledgeCenter", Storage="_User", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AcknowledgeCenter = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AcknowledgeCenter = this;
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserShift")]
	public partial class UserShift : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date;
		
		private System.Guid _CenterID;
		
		private System.Nullable<System.Guid> _MorningUser;
		
		private System.Nullable<System.Guid> _AfterNoonUser;
		
		private System.Nullable<System.Guid> _NightUser;
		
		private EntityRef<Center> _Center;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
		private EntityRef<User> _User2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnCenterIDChanging(System.Guid value);
    partial void OnCenterIDChanged();
    partial void OnMorningUserChanging(System.Nullable<System.Guid> value);
    partial void OnMorningUserChanged();
    partial void OnAfterNoonUserChanging(System.Nullable<System.Guid> value);
    partial void OnAfterNoonUserChanged();
    partial void OnNightUserChanging(System.Nullable<System.Guid> value);
    partial void OnNightUserChanged();
    #endregion
		
		public UserShift()
		{
			this._Center = default(EntityRef<Center>);
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			this._User2 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MorningUser", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> MorningUser
		{
			get
			{
				return this._MorningUser;
			}
			set
			{
				if ((this._MorningUser != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMorningUserChanging(value);
					this.SendPropertyChanging();
					this._MorningUser = value;
					this.SendPropertyChanged("MorningUser");
					this.OnMorningUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AfterNoonUser", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AfterNoonUser
		{
			get
			{
				return this._AfterNoonUser;
			}
			set
			{
				if ((this._AfterNoonUser != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAfterNoonUserChanging(value);
					this.SendPropertyChanging();
					this._AfterNoonUser = value;
					this.SendPropertyChanged("AfterNoonUser");
					this.OnAfterNoonUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NightUser", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> NightUser
		{
			get
			{
				return this._NightUser;
			}
			set
			{
				if ((this._NightUser != value))
				{
					if (this._User2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNightUserChanging(value);
					this.SendPropertyChanging();
					this._NightUser = value;
					this.SendPropertyChanged("NightUser");
					this.OnNightUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_UserShift", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.UserShifts.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.UserShifts.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(System.Guid);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserShift", Storage="_User", ThisKey="MorningUser", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserShifts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserShifts.Add(this);
						this._MorningUser = value.ID;
					}
					else
					{
						this._MorningUser = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserShift1", Storage="_User1", ThisKey="AfterNoonUser", OtherKey="ID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.UserShifts1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.UserShifts1.Add(this);
						this._AfterNoonUser = value.ID;
					}
					else
					{
						this._AfterNoonUser = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserShift2", Storage="_User2", ThisKey="NightUser", OtherKey="ID", IsForeignKey=true)]
		public User User2
		{
			get
			{
				return this._User2.Entity;
			}
			set
			{
				User previousValue = this._User2.Entity;
				if (((previousValue != value) 
							|| (this._User2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User2.Entity = null;
						previousValue.UserShifts2.Remove(this);
					}
					this._User2.Entity = value;
					if ((value != null))
					{
						value.UserShifts2.Add(this);
						this._NightUser = value.ID;
					}
					else
					{
						this._NightUser = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User2");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Alarm")]
	public partial class Alarm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.DateTime> _DisconnectTime;
		
		private System.Nullable<System.DateTime> _ConnectTime;
		
		private System.Nullable<System.Guid> _RouteID;
		
		private string _Description;
		
		private System.Nullable<System.Guid> _CenterID;
		
		private System.Nullable<System.DateTime> _ReportTime;
		
		private System.Guid _Type;
		
		private string _ReportReceiver;
		
		private string _Fixer;
		
		private string _Assessor;
		
		private System.Nullable<System.Guid> _Reporter;
		
		private System.Nullable<System.Guid> _FailedLink;
		
		private System.Nullable<int> _Shift;
		
		private string _DamagePlace;
		
		private System.Nullable<System.DateTime> _AnnounceDate;
		
		private EntityRef<AlarmType> _AlarmType;
		
		private EntityRef<Center> _Center;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnDisconnectTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDisconnectTimeChanged();
    partial void OnConnectTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnConnectTimeChanged();
    partial void OnRouteIDChanging(System.Nullable<System.Guid> value);
    partial void OnRouteIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCenterIDChanging(System.Nullable<System.Guid> value);
    partial void OnCenterIDChanged();
    partial void OnReportTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnReportTimeChanged();
    partial void OnTypeChanging(System.Guid value);
    partial void OnTypeChanged();
    partial void OnReportReceiverChanging(string value);
    partial void OnReportReceiverChanged();
    partial void OnFixerChanging(string value);
    partial void OnFixerChanged();
    partial void OnAssessorChanging(string value);
    partial void OnAssessorChanged();
    partial void OnReporterChanging(System.Nullable<System.Guid> value);
    partial void OnReporterChanged();
    partial void OnFailedLinkChanging(System.Nullable<System.Guid> value);
    partial void OnFailedLinkChanged();
    partial void OnShiftChanging(System.Nullable<int> value);
    partial void OnShiftChanged();
    partial void OnDamagePlaceChanging(string value);
    partial void OnDamagePlaceChanged();
    partial void OnAnnounceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAnnounceDateChanged();
    #endregion
		
		public Alarm()
		{
			this._AlarmType = default(EntityRef<AlarmType>);
			this._Center = default(EntityRef<Center>);
			this._Link = default(EntityRef<Link>);
			this._Route = default(EntityRef<Route>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisconnectTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> DisconnectTime
		{
			get
			{
				return this._DisconnectTime;
			}
			set
			{
				if ((this._DisconnectTime != value))
				{
					this.OnDisconnectTimeChanging(value);
					this.SendPropertyChanging();
					this._DisconnectTime = value;
					this.SendPropertyChanged("DisconnectTime");
					this.OnDisconnectTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConnectTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ConnectTime
		{
			get
			{
				return this._ConnectTime;
			}
			set
			{
				if ((this._ConnectTime != value))
				{
					this.OnConnectTimeChanging(value);
					this.SendPropertyChanging();
					this._ConnectTime = value;
					this.SendPropertyChanged("ConnectTime");
					this.OnConnectTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ReportTime
		{
			get
			{
				return this._ReportTime;
			}
			set
			{
				if ((this._ReportTime != value))
				{
					this.OnReportTimeChanging(value);
					this.SendPropertyChanging();
					this._ReportTime = value;
					this.SendPropertyChanged("ReportTime");
					this.OnReportTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._AlarmType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportReceiver", DbType="NVarChar(30)")]
		public string ReportReceiver
		{
			get
			{
				return this._ReportReceiver;
			}
			set
			{
				if ((this._ReportReceiver != value))
				{
					this.OnReportReceiverChanging(value);
					this.SendPropertyChanging();
					this._ReportReceiver = value;
					this.SendPropertyChanged("ReportReceiver");
					this.OnReportReceiverChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fixer", DbType="NVarChar(30)")]
		public string Fixer
		{
			get
			{
				return this._Fixer;
			}
			set
			{
				if ((this._Fixer != value))
				{
					this.OnFixerChanging(value);
					this.SendPropertyChanging();
					this._Fixer = value;
					this.SendPropertyChanged("Fixer");
					this.OnFixerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assessor", DbType="NVarChar(30)")]
		public string Assessor
		{
			get
			{
				return this._Assessor;
			}
			set
			{
				if ((this._Assessor != value))
				{
					this.OnAssessorChanging(value);
					this.SendPropertyChanging();
					this._Assessor = value;
					this.SendPropertyChanged("Assessor");
					this.OnAssessorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reporter", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Reporter
		{
			get
			{
				return this._Reporter;
			}
			set
			{
				if ((this._Reporter != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReporterChanging(value);
					this.SendPropertyChanging();
					this._Reporter = value;
					this.SendPropertyChanged("Reporter");
					this.OnReporterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedLink", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FailedLink
		{
			get
			{
				return this._FailedLink;
			}
			set
			{
				if ((this._FailedLink != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFailedLinkChanging(value);
					this.SendPropertyChanging();
					this._FailedLink = value;
					this.SendPropertyChanged("FailedLink");
					this.OnFailedLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shift", DbType="Int")]
		public System.Nullable<int> Shift
		{
			get
			{
				return this._Shift;
			}
			set
			{
				if ((this._Shift != value))
				{
					this.OnShiftChanging(value);
					this.SendPropertyChanging();
					this._Shift = value;
					this.SendPropertyChanged("Shift");
					this.OnShiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DamagePlace", DbType="NVarChar(30)")]
		public string DamagePlace
		{
			get
			{
				return this._DamagePlace;
			}
			set
			{
				if ((this._DamagePlace != value))
				{
					this.OnDamagePlaceChanging(value);
					this.SendPropertyChanging();
					this._DamagePlace = value;
					this.SendPropertyChanged("DamagePlace");
					this.OnDamagePlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnounceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AnnounceDate
		{
			get
			{
				return this._AnnounceDate;
			}
			set
			{
				if ((this._AnnounceDate != value))
				{
					this.OnAnnounceDateChanging(value);
					this.SendPropertyChanging();
					this._AnnounceDate = value;
					this.SendPropertyChanged("AnnounceDate");
					this.OnAnnounceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlarmType_Alarm", Storage="_AlarmType", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
		public AlarmType AlarmType
		{
			get
			{
				return this._AlarmType.Entity;
			}
			set
			{
				AlarmType previousValue = this._AlarmType.Entity;
				if (((previousValue != value) 
							|| (this._AlarmType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AlarmType.Entity = null;
						previousValue.Alarms.Remove(this);
					}
					this._AlarmType.Entity = value;
					if ((value != null))
					{
						value.Alarms.Add(this);
						this._Type = value.ID;
					}
					else
					{
						this._Type = default(System.Guid);
					}
					this.SendPropertyChanged("AlarmType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Alarm", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.Alarms.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.Alarms.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_Alarm", Storage="_Link", ThisKey="FailedLink", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.Alarms.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.Alarms.Add(this);
						this._FailedLink = value.ID;
					}
					else
					{
						this._FailedLink = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Alarm", Storage="_Route", ThisKey="RouteID", OtherKey="ID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Alarms.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Alarms.Add(this);
						this._RouteID = value.ID;
					}
					else
					{
						this._RouteID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Alarm", Storage="_User", ThisKey="Reporter", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Alarms.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Alarms.Add(this);
						this._Reporter = value.ID;
					}
					else
					{
						this._Reporter = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlarmSeverityOverride")]
	public partial class AlarmSeverityOverride : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _SwitchTypeID;
		
		private string _AlarmNumber;
		
		private string _Pattern;
		
		private byte _NewSeverity;
		
		private string _NewTitle;
		
		private EntityRef<SwitchType> _SwitchType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSwitchTypeIDChanging(System.Guid value);
    partial void OnSwitchTypeIDChanged();
    partial void OnAlarmNumberChanging(string value);
    partial void OnAlarmNumberChanged();
    partial void OnPatternChanging(string value);
    partial void OnPatternChanged();
    partial void OnNewSeverityChanging(byte value);
    partial void OnNewSeverityChanged();
    partial void OnNewTitleChanging(string value);
    partial void OnNewTitleChanged();
    #endregion
		
		public AlarmSeverityOverride()
		{
			this._SwitchType = default(EntityRef<SwitchType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SwitchTypeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SwitchTypeID
		{
			get
			{
				return this._SwitchTypeID;
			}
			set
			{
				if ((this._SwitchTypeID != value))
				{
					if (this._SwitchType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSwitchTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SwitchTypeID = value;
					this.SendPropertyChanged("SwitchTypeID");
					this.OnSwitchTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlarmNumber", DbType="VarChar(20)")]
		public string AlarmNumber
		{
			get
			{
				return this._AlarmNumber;
			}
			set
			{
				if ((this._AlarmNumber != value))
				{
					this.OnAlarmNumberChanging(value);
					this.SendPropertyChanging();
					this._AlarmNumber = value;
					this.SendPropertyChanged("AlarmNumber");
					this.OnAlarmNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pattern", DbType="VarChar(50)")]
		public string Pattern
		{
			get
			{
				return this._Pattern;
			}
			set
			{
				if ((this._Pattern != value))
				{
					this.OnPatternChanging(value);
					this.SendPropertyChanging();
					this._Pattern = value;
					this.SendPropertyChanged("Pattern");
					this.OnPatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewSeverity", DbType="TinyInt NOT NULL")]
		public byte NewSeverity
		{
			get
			{
				return this._NewSeverity;
			}
			set
			{
				if ((this._NewSeverity != value))
				{
					this.OnNewSeverityChanging(value);
					this.SendPropertyChanging();
					this._NewSeverity = value;
					this.SendPropertyChanged("NewSeverity");
					this.OnNewSeverityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewTitle", DbType="NVarChar(50)")]
		public string NewTitle
		{
			get
			{
				return this._NewTitle;
			}
			set
			{
				if ((this._NewTitle != value))
				{
					this.OnNewTitleChanging(value);
					this.SendPropertyChanging();
					this._NewTitle = value;
					this.SendPropertyChanged("NewTitle");
					this.OnNewTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_AlarmSeverityOverride", Storage="_SwitchType", ThisKey="SwitchTypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SwitchType SwitchType
		{
			get
			{
				return this._SwitchType.Entity;
			}
			set
			{
				SwitchType previousValue = this._SwitchType.Entity;
				if (((previousValue != value) 
							|| (this._SwitchType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SwitchType.Entity = null;
						previousValue.AlarmSeverityOverrides.Remove(this);
					}
					this._SwitchType.Entity = value;
					if ((value != null))
					{
						value.AlarmSeverityOverrides.Add(this);
						this._SwitchTypeID = value.ID;
					}
					else
					{
						this._SwitchTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("SwitchType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AlarmType")]
	public partial class AlarmType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private EntitySet<Alarm> _Alarms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AlarmType()
		{
			this._Alarms = new EntitySet<Alarm>(new Action<Alarm>(this.attach_Alarms), new Action<Alarm>(this.detach_Alarms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AlarmType_Alarm", Storage="_Alarms", ThisKey="ID", OtherKey="Type")]
		public EntitySet<Alarm> Alarms
		{
			get
			{
				return this._Alarms;
			}
			set
			{
				this._Alarms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alarms(Alarm entity)
		{
			this.SendPropertyChanging();
			entity.AlarmType = this;
		}
		
		private void detach_Alarms(Alarm entity)
		{
			this.SendPropertyChanging();
			entity.AlarmType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Card")]
	public partial class Card : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _Type;
		
		private System.Nullable<System.Guid> _ShelfID;
		
		private System.Nullable<int> _SlotNo;
		
		private string _SerialNo;
		
		private string _Name;
		
		private string _EQP;
		
		private EntitySet<Link> _Links;
		
		private EntityRef<CardType> _CardType;
		
		private EntityRef<Shelf> _Shelf;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTypeChanging(System.Guid value);
    partial void OnTypeChanged();
    partial void OnShelfIDChanging(System.Nullable<System.Guid> value);
    partial void OnShelfIDChanged();
    partial void OnSlotNoChanging(System.Nullable<int> value);
    partial void OnSlotNoChanged();
    partial void OnSerialNoChanging(string value);
    partial void OnSerialNoChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEQPChanging(string value);
    partial void OnEQPChanged();
    #endregion
		
		public Card()
		{
			this._Links = new EntitySet<Link>(new Action<Link>(this.attach_Links), new Action<Link>(this.detach_Links));
			this._CardType = default(EntityRef<CardType>);
			this._Shelf = default(EntityRef<Shelf>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._CardType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelfID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ShelfID
		{
			get
			{
				return this._ShelfID;
			}
			set
			{
				if ((this._ShelfID != value))
				{
					if (this._Shelf.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShelfIDChanging(value);
					this.SendPropertyChanging();
					this._ShelfID = value;
					this.SendPropertyChanged("ShelfID");
					this.OnShelfIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotNo", DbType="Int")]
		public System.Nullable<int> SlotNo
		{
			get
			{
				return this._SlotNo;
			}
			set
			{
				if ((this._SlotNo != value))
				{
					this.OnSlotNoChanging(value);
					this.SendPropertyChanging();
					this._SlotNo = value;
					this.SendPropertyChanged("SlotNo");
					this.OnSlotNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SerialNo", DbType="NVarChar(20)")]
		public string SerialNo
		{
			get
			{
				return this._SerialNo;
			}
			set
			{
				if ((this._SerialNo != value))
				{
					this.OnSerialNoChanging(value);
					this.SendPropertyChanging();
					this._SerialNo = value;
					this.SendPropertyChanged("SerialNo");
					this.OnSerialNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EQP", DbType="VarChar(10)")]
		public string EQP
		{
			get
			{
				return this._EQP;
			}
			set
			{
				if ((this._EQP != value))
				{
					this.OnEQPChanging(value);
					this.SendPropertyChanging();
					this._EQP = value;
					this.SendPropertyChanged("EQP");
					this.OnEQPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_Link", Storage="_Links", ThisKey="ID", OtherKey="CardID")]
		public EntitySet<Link> Links
		{
			get
			{
				return this._Links;
			}
			set
			{
				this._Links.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardType_Card", Storage="_CardType", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
		public CardType CardType
		{
			get
			{
				return this._CardType.Entity;
			}
			set
			{
				CardType previousValue = this._CardType.Entity;
				if (((previousValue != value) 
							|| (this._CardType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CardType.Entity = null;
						previousValue.Cards.Remove(this);
					}
					this._CardType.Entity = value;
					if ((value != null))
					{
						value.Cards.Add(this);
						this._Type = value.ID;
					}
					else
					{
						this._Type = default(System.Guid);
					}
					this.SendPropertyChanged("CardType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelf_Card", Storage="_Shelf", ThisKey="ShelfID", OtherKey="ID", IsForeignKey=true)]
		public Shelf Shelf
		{
			get
			{
				return this._Shelf.Entity;
			}
			set
			{
				Shelf previousValue = this._Shelf.Entity;
				if (((previousValue != value) 
							|| (this._Shelf.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Shelf.Entity = null;
						previousValue.Cards.Remove(this);
					}
					this._Shelf.Entity = value;
					if ((value != null))
					{
						value.Cards.Add(this);
						this._ShelfID = value.ID;
					}
					else
					{
						this._ShelfID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Shelf");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CardType")]
	public partial class CardType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _SupportingSwitch;
		
		private System.Nullable<int> _E1Count;
		
		private System.Nullable<bool> _IsControlCard;
		
		private EntitySet<Card> _Cards;
		
		private EntitySet<ShelfCardType> _ShelfCardTypes;
		
		private EntitySet<SpareCard> _SpareCards;
		
		private EntityRef<SwitchType> _SwitchType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSupportingSwitchChanging(System.Guid value);
    partial void OnSupportingSwitchChanged();
    partial void OnE1CountChanging(System.Nullable<int> value);
    partial void OnE1CountChanged();
    partial void OnIsControlCardChanging(System.Nullable<bool> value);
    partial void OnIsControlCardChanged();
    #endregion
		
		public CardType()
		{
			this._Cards = new EntitySet<Card>(new Action<Card>(this.attach_Cards), new Action<Card>(this.detach_Cards));
			this._ShelfCardTypes = new EntitySet<ShelfCardType>(new Action<ShelfCardType>(this.attach_ShelfCardTypes), new Action<ShelfCardType>(this.detach_ShelfCardTypes));
			this._SpareCards = new EntitySet<SpareCard>(new Action<SpareCard>(this.attach_SpareCards), new Action<SpareCard>(this.detach_SpareCards));
			this._SwitchType = default(EntityRef<SwitchType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportingSwitch", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SupportingSwitch
		{
			get
			{
				return this._SupportingSwitch;
			}
			set
			{
				if ((this._SupportingSwitch != value))
				{
					if (this._SwitchType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupportingSwitchChanging(value);
					this.SendPropertyChanging();
					this._SupportingSwitch = value;
					this.SendPropertyChanged("SupportingSwitch");
					this.OnSupportingSwitchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E1Count", DbType="Int")]
		public System.Nullable<int> E1Count
		{
			get
			{
				return this._E1Count;
			}
			set
			{
				if ((this._E1Count != value))
				{
					this.OnE1CountChanging(value);
					this.SendPropertyChanging();
					this._E1Count = value;
					this.SendPropertyChanged("E1Count");
					this.OnE1CountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsControlCard", DbType="Bit")]
		public System.Nullable<bool> IsControlCard
		{
			get
			{
				return this._IsControlCard;
			}
			set
			{
				if ((this._IsControlCard != value))
				{
					this.OnIsControlCardChanging(value);
					this.SendPropertyChanging();
					this._IsControlCard = value;
					this.SendPropertyChanged("IsControlCard");
					this.OnIsControlCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardType_Card", Storage="_Cards", ThisKey="ID", OtherKey="Type")]
		public EntitySet<Card> Cards
		{
			get
			{
				return this._Cards;
			}
			set
			{
				this._Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardType_ShelfCardType", Storage="_ShelfCardTypes", ThisKey="ID", OtherKey="CardTypeID")]
		public EntitySet<ShelfCardType> ShelfCardTypes
		{
			get
			{
				return this._ShelfCardTypes;
			}
			set
			{
				this._ShelfCardTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardType_SpareCard", Storage="_SpareCards", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<SpareCard> SpareCards
		{
			get
			{
				return this._SpareCards;
			}
			set
			{
				this._SpareCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_CardType", Storage="_SwitchType", ThisKey="SupportingSwitch", OtherKey="ID", IsForeignKey=true)]
		public SwitchType SwitchType
		{
			get
			{
				return this._SwitchType.Entity;
			}
			set
			{
				SwitchType previousValue = this._SwitchType.Entity;
				if (((previousValue != value) 
							|| (this._SwitchType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SwitchType.Entity = null;
						previousValue.CardTypes.Remove(this);
					}
					this._SwitchType.Entity = value;
					if ((value != null))
					{
						value.CardTypes.Add(this);
						this._SupportingSwitch = value.ID;
					}
					else
					{
						this._SupportingSwitch = default(System.Guid);
					}
					this.SendPropertyChanged("SwitchType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.CardType = this;
		}
		
		private void detach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.CardType = null;
		}
		
		private void attach_ShelfCardTypes(ShelfCardType entity)
		{
			this.SendPropertyChanging();
			entity.CardType = this;
		}
		
		private void detach_ShelfCardTypes(ShelfCardType entity)
		{
			this.SendPropertyChanging();
			entity.CardType = null;
		}
		
		private void attach_SpareCards(SpareCard entity)
		{
			this.SendPropertyChanging();
			entity.CardType = this;
		}
		
		private void detach_SpareCards(SpareCard entity)
		{
			this.SendPropertyChanging();
			entity.CardType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Center")]
	public partial class Center : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _Switch;
		
		private string _Name;
		
		private System.Nullable<double> _Width;
		
		private System.Nullable<double> _Height;
		
		private string _Latitude;
		
		private string _Longitude;
		
		private System.Nullable<int> _CenterType;
		
		private string _PointCode;
		
		private string _Description;
		
		private string _Code;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private string _FX;
		
		private string _TestNo;
		
		private string _UserName;
		
		private string _Password;
		
		private string _IPAddress;
		
		private string _ContactNo;
		
		private System.Nullable<System.Guid> _RegionID;
		
		private EntityRef<AcknowledgeCenter> _AcknowledgeCenter;
		
		private EntitySet<UserShift> _UserShifts;
		
		private EntitySet<Alarm> _Alarms;
		
		private EntitySet<CenterInMap> _CenterInMaps;
		
		private EntitySet<CenterLink> _CenterLinks;
		
		private EntitySet<CenterLink> _CenterLinks1;
		
		private EntitySet<CircuitLink> _CircuitLinks;
		
		private EntitySet<DDF> _DDFs;
		
		private EntitySet<Dest> _Dests;
		
		private EntitySet<Instruction> _Instructions;
		
		private EntitySet<Instruction> _Instructions1;
		
		private EntitySet<Link> _Links;
		
		private EntitySet<Rack> _Racks;
		
		private EntitySet<Room> _Rooms;
		
		private EntitySet<Route> _Routes;
		
		private EntitySet<ServiceState> _ServiceStates;
		
		private EntitySet<SpareCard> _SpareCards;
		
		private EntitySet<User> _Users;
		
		private EntitySet<CenterContact> _CenterContacts;
		
		private EntitySet<LogAlarm> _LogAlarms;
		
		private EntityRef<Region> _Region;
		
		private EntityRef<SwitchType> _SwitchType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSwitchChanging(System.Guid value);
    partial void OnSwitchChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWidthChanging(System.Nullable<double> value);
    partial void OnWidthChanged();
    partial void OnHeightChanging(System.Nullable<double> value);
    partial void OnHeightChanged();
    partial void OnLatitudeChanging(string value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(string value);
    partial void OnLongitudeChanged();
    partial void OnCenterTypeChanging(System.Nullable<int> value);
    partial void OnCenterTypeChanged();
    partial void OnPointCodeChanging(string value);
    partial void OnPointCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnXChanging(System.Nullable<double> value);
    partial void OnXChanged();
    partial void OnYChanging(System.Nullable<double> value);
    partial void OnYChanged();
    partial void OnFXChanging(string value);
    partial void OnFXChanged();
    partial void OnTestNoChanging(string value);
    partial void OnTestNoChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIPAddressChanging(string value);
    partial void OnIPAddressChanged();
    partial void OnContactNoChanging(string value);
    partial void OnContactNoChanged();
    partial void OnRegionIDChanging(System.Nullable<System.Guid> value);
    partial void OnRegionIDChanged();
    #endregion
		
		public Center()
		{
			this._AcknowledgeCenter = default(EntityRef<AcknowledgeCenter>);
			this._UserShifts = new EntitySet<UserShift>(new Action<UserShift>(this.attach_UserShifts), new Action<UserShift>(this.detach_UserShifts));
			this._Alarms = new EntitySet<Alarm>(new Action<Alarm>(this.attach_Alarms), new Action<Alarm>(this.detach_Alarms));
			this._CenterInMaps = new EntitySet<CenterInMap>(new Action<CenterInMap>(this.attach_CenterInMaps), new Action<CenterInMap>(this.detach_CenterInMaps));
			this._CenterLinks = new EntitySet<CenterLink>(new Action<CenterLink>(this.attach_CenterLinks), new Action<CenterLink>(this.detach_CenterLinks));
			this._CenterLinks1 = new EntitySet<CenterLink>(new Action<CenterLink>(this.attach_CenterLinks1), new Action<CenterLink>(this.detach_CenterLinks1));
			this._CircuitLinks = new EntitySet<CircuitLink>(new Action<CircuitLink>(this.attach_CircuitLinks), new Action<CircuitLink>(this.detach_CircuitLinks));
			this._DDFs = new EntitySet<DDF>(new Action<DDF>(this.attach_DDFs), new Action<DDF>(this.detach_DDFs));
			this._Dests = new EntitySet<Dest>(new Action<Dest>(this.attach_Dests), new Action<Dest>(this.detach_Dests));
			this._Instructions = new EntitySet<Instruction>(new Action<Instruction>(this.attach_Instructions), new Action<Instruction>(this.detach_Instructions));
			this._Instructions1 = new EntitySet<Instruction>(new Action<Instruction>(this.attach_Instructions1), new Action<Instruction>(this.detach_Instructions1));
			this._Links = new EntitySet<Link>(new Action<Link>(this.attach_Links), new Action<Link>(this.detach_Links));
			this._Racks = new EntitySet<Rack>(new Action<Rack>(this.attach_Racks), new Action<Rack>(this.detach_Racks));
			this._Rooms = new EntitySet<Room>(new Action<Room>(this.attach_Rooms), new Action<Room>(this.detach_Rooms));
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			this._ServiceStates = new EntitySet<ServiceState>(new Action<ServiceState>(this.attach_ServiceStates), new Action<ServiceState>(this.detach_ServiceStates));
			this._SpareCards = new EntitySet<SpareCard>(new Action<SpareCard>(this.attach_SpareCards), new Action<SpareCard>(this.detach_SpareCards));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._CenterContacts = new EntitySet<CenterContact>(new Action<CenterContact>(this.attach_CenterContacts), new Action<CenterContact>(this.detach_CenterContacts));
			this._LogAlarms = new EntitySet<LogAlarm>(new Action<LogAlarm>(this.attach_LogAlarms), new Action<LogAlarm>(this.detach_LogAlarms));
			this._Region = default(EntityRef<Region>);
			this._SwitchType = default(EntityRef<SwitchType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Switch", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Switch
		{
			get
			{
				return this._Switch;
			}
			set
			{
				if ((this._Switch != value))
				{
					if (this._SwitchType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSwitchChanging(value);
					this.SendPropertyChanging();
					this._Switch = value;
					this.SendPropertyChanged("Switch");
					this.OnSwitchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Float")]
		public System.Nullable<double> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Height", DbType="Float")]
		public System.Nullable<double> Height
		{
			get
			{
				return this._Height;
			}
			set
			{
				if ((this._Height != value))
				{
					this.OnHeightChanging(value);
					this.SendPropertyChanging();
					this._Height = value;
					this.SendPropertyChanged("Height");
					this.OnHeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latitude", DbType="VarChar(50)")]
		public string Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Longitude", DbType="VarChar(50)")]
		public string Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterType", DbType="Int")]
		public System.Nullable<int> CenterType
		{
			get
			{
				return this._CenterType;
			}
			set
			{
				if ((this._CenterType != value))
				{
					this.OnCenterTypeChanging(value);
					this.SendPropertyChanging();
					this._CenterType = value;
					this.SendPropertyChanged("CenterType");
					this.OnCenterTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PointCode", DbType="VarChar(20)")]
		public string PointCode
		{
			get
			{
				return this._PointCode;
			}
			set
			{
				if ((this._PointCode != value))
				{
					this.OnPointCodeChanging(value);
					this.SendPropertyChanging();
					this._PointCode = value;
					this.SendPropertyChanged("PointCode");
					this.OnPointCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(15)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FX", DbType="VarChar(10)")]
		public string FX
		{
			get
			{
				return this._FX;
			}
			set
			{
				if ((this._FX != value))
				{
					this.OnFXChanging(value);
					this.SendPropertyChanging();
					this._FX = value;
					this.SendPropertyChanged("FX");
					this.OnFXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestNo", DbType="VarChar(15)")]
		public string TestNo
		{
			get
			{
				return this._TestNo;
			}
			set
			{
				if ((this._TestNo != value))
				{
					this.OnTestNoChanging(value);
					this.SendPropertyChanging();
					this._TestNo = value;
					this.SendPropertyChanged("TestNo");
					this.OnTestNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPAddress", DbType="VarChar(15)")]
		public string IPAddress
		{
			get
			{
				return this._IPAddress;
			}
			set
			{
				if ((this._IPAddress != value))
				{
					this.OnIPAddressChanging(value);
					this.SendPropertyChanging();
					this._IPAddress = value;
					this.SendPropertyChanged("IPAddress");
					this.OnIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactNo", DbType="NVarChar(50)")]
		public string ContactNo
		{
			get
			{
				return this._ContactNo;
			}
			set
			{
				if ((this._ContactNo != value))
				{
					this.OnContactNoChanging(value);
					this.SendPropertyChanging();
					this._ContactNo = value;
					this.SendPropertyChanged("ContactNo");
					this.OnContactNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegionID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RegionID
		{
			get
			{
				return this._RegionID;
			}
			set
			{
				if ((this._RegionID != value))
				{
					if (this._Region.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRegionIDChanging(value);
					this.SendPropertyChanging();
					this._RegionID = value;
					this.SendPropertyChanged("RegionID");
					this.OnRegionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_AcknowledgeCenter", Storage="_AcknowledgeCenter", ThisKey="ID", OtherKey="CenterID", IsUnique=true, IsForeignKey=false)]
		public AcknowledgeCenter AcknowledgeCenter
		{
			get
			{
				return this._AcknowledgeCenter.Entity;
			}
			set
			{
				AcknowledgeCenter previousValue = this._AcknowledgeCenter.Entity;
				if (((previousValue != value) 
							|| (this._AcknowledgeCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcknowledgeCenter.Entity = null;
						previousValue.Center = null;
					}
					this._AcknowledgeCenter.Entity = value;
					if ((value != null))
					{
						value.Center = this;
					}
					this.SendPropertyChanged("AcknowledgeCenter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_UserShift", Storage="_UserShifts", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<UserShift> UserShifts
		{
			get
			{
				return this._UserShifts;
			}
			set
			{
				this._UserShifts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Alarm", Storage="_Alarms", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<Alarm> Alarms
		{
			get
			{
				return this._Alarms;
			}
			set
			{
				this._Alarms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_CenterInMap", Storage="_CenterInMaps", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<CenterInMap> CenterInMaps
		{
			get
			{
				return this._CenterInMaps;
			}
			set
			{
				this._CenterInMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_CenterLink", Storage="_CenterLinks", ThisKey="ID", OtherKey="CenterA")]
		public EntitySet<CenterLink> CenterLinks
		{
			get
			{
				return this._CenterLinks;
			}
			set
			{
				this._CenterLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_CenterLink1", Storage="_CenterLinks1", ThisKey="ID", OtherKey="CenterB")]
		public EntitySet<CenterLink> CenterLinks1
		{
			get
			{
				return this._CenterLinks1;
			}
			set
			{
				this._CenterLinks1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_CircuitLink", Storage="_CircuitLinks", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<CircuitLink> CircuitLinks
		{
			get
			{
				return this._CircuitLinks;
			}
			set
			{
				this._CircuitLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_DDF", Storage="_DDFs", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<DDF> DDFs
		{
			get
			{
				return this._DDFs;
			}
			set
			{
				this._DDFs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Dest", Storage="_Dests", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<Dest> Dests
		{
			get
			{
				return this._Dests;
			}
			set
			{
				this._Dests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Instruction", Storage="_Instructions", ThisKey="ID", OtherKey="Source")]
		public EntitySet<Instruction> Instructions
		{
			get
			{
				return this._Instructions;
			}
			set
			{
				this._Instructions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Instruction1", Storage="_Instructions1", ThisKey="ID", OtherKey="Destination")]
		public EntitySet<Instruction> Instructions1
		{
			get
			{
				return this._Instructions1;
			}
			set
			{
				this._Instructions1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Link", Storage="_Links", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<Link> Links
		{
			get
			{
				return this._Links;
			}
			set
			{
				this._Links.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Rack", Storage="_Racks", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<Rack> Racks
		{
			get
			{
				return this._Racks;
			}
			set
			{
				this._Racks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Room", Storage="_Rooms", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<Room> Rooms
		{
			get
			{
				return this._Rooms;
			}
			set
			{
				this._Rooms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Route", Storage="_Routes", ThisKey="ID", OtherKey="SourceCenter")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_ServiceState", Storage="_ServiceStates", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<ServiceState> ServiceStates
		{
			get
			{
				return this._ServiceStates;
			}
			set
			{
				this._ServiceStates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_SpareCard", Storage="_SpareCards", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<SpareCard> SpareCards
		{
			get
			{
				return this._SpareCards;
			}
			set
			{
				this._SpareCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_User", Storage="_Users", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_CenterContact", Storage="_CenterContacts", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<CenterContact> CenterContacts
		{
			get
			{
				return this._CenterContacts;
			}
			set
			{
				this._CenterContacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_LogAlarm", Storage="_LogAlarms", ThisKey="ID", OtherKey="CenterID")]
		public EntitySet<LogAlarm> LogAlarms
		{
			get
			{
				return this._LogAlarms;
			}
			set
			{
				this._LogAlarms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Center", Storage="_Region", ThisKey="RegionID", OtherKey="ID", IsForeignKey=true)]
		public Region Region
		{
			get
			{
				return this._Region.Entity;
			}
			set
			{
				Region previousValue = this._Region.Entity;
				if (((previousValue != value) 
							|| (this._Region.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Region.Entity = null;
						previousValue.Centers.Remove(this);
					}
					this._Region.Entity = value;
					if ((value != null))
					{
						value.Centers.Add(this);
						this._RegionID = value.ID;
					}
					else
					{
						this._RegionID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Region");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_Center", Storage="_SwitchType", ThisKey="Switch", OtherKey="ID", IsForeignKey=true)]
		public SwitchType SwitchType
		{
			get
			{
				return this._SwitchType.Entity;
			}
			set
			{
				SwitchType previousValue = this._SwitchType.Entity;
				if (((previousValue != value) 
							|| (this._SwitchType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SwitchType.Entity = null;
						previousValue.Centers.Remove(this);
					}
					this._SwitchType.Entity = value;
					if ((value != null))
					{
						value.Centers.Add(this);
						this._Switch = value.ID;
					}
					else
					{
						this._Switch = default(System.Guid);
					}
					this.SendPropertyChanged("SwitchType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserShifts(UserShift entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_UserShifts(UserShift entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_Alarms(Alarm entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_Alarms(Alarm entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_CenterInMaps(CenterInMap entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_CenterInMaps(CenterInMap entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_CenterLinks(CenterLink entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_CenterLinks(CenterLink entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_CenterLinks1(CenterLink entity)
		{
			this.SendPropertyChanging();
			entity.Center1 = this;
		}
		
		private void detach_CenterLinks1(CenterLink entity)
		{
			this.SendPropertyChanging();
			entity.Center1 = null;
		}
		
		private void attach_CircuitLinks(CircuitLink entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_CircuitLinks(CircuitLink entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_DDFs(DDF entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_DDFs(DDF entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_Dests(Dest entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_Dests(Dest entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_Instructions(Instruction entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_Instructions(Instruction entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_Instructions1(Instruction entity)
		{
			this.SendPropertyChanging();
			entity.Center1 = this;
		}
		
		private void detach_Instructions1(Instruction entity)
		{
			this.SendPropertyChanging();
			entity.Center1 = null;
		}
		
		private void attach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_Racks(Rack entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_Racks(Rack entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_Rooms(Room entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_ServiceStates(ServiceState entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_ServiceStates(ServiceState entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_SpareCards(SpareCard entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_SpareCards(SpareCard entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_CenterContacts(CenterContact entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_CenterContacts(CenterContact entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
		
		private void attach_LogAlarms(LogAlarm entity)
		{
			this.SendPropertyChanging();
			entity.Center = this;
		}
		
		private void detach_LogAlarms(LogAlarm entity)
		{
			this.SendPropertyChanging();
			entity.Center = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CenterInMap")]
	public partial class CenterInMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _MapID;
		
		private System.Guid _CenterID;
		
		private System.Nullable<int> _X;
		
		private System.Nullable<int> _Y;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMapIDChanging(System.Guid value);
    partial void OnMapIDChanged();
    partial void OnCenterIDChanging(System.Guid value);
    partial void OnCenterIDChanged();
    partial void OnXChanging(System.Nullable<int> value);
    partial void OnXChanged();
    partial void OnYChanging(System.Nullable<int> value);
    partial void OnYChanged();
    #endregion
		
		public CenterInMap()
		{
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MapID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid MapID
		{
			get
			{
				return this._MapID;
			}
			set
			{
				if ((this._MapID != value))
				{
					this.OnMapIDChanging(value);
					this.SendPropertyChanging();
					this._MapID = value;
					this.SendPropertyChanged("MapID");
					this.OnMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Int")]
		public System.Nullable<int> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Int")]
		public System.Nullable<int> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_CenterInMap", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.CenterInMaps.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.CenterInMaps.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(System.Guid);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CenterLink")]
	public partial class CenterLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CenterA;
		
		private System.Guid _CenterB;
		
		private System.Nullable<int> _LinkType;
		
		private System.Nullable<int> _E1Count;
		
		private EntityRef<Center> _Center;
		
		private EntityRef<Center> _Center1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCenterAChanging(System.Guid value);
    partial void OnCenterAChanged();
    partial void OnCenterBChanging(System.Guid value);
    partial void OnCenterBChanged();
    partial void OnLinkTypeChanging(System.Nullable<int> value);
    partial void OnLinkTypeChanged();
    partial void OnE1CountChanging(System.Nullable<int> value);
    partial void OnE1CountChanged();
    #endregion
		
		public CenterLink()
		{
			this._Center = default(EntityRef<Center>);
			this._Center1 = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterA", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CenterA
		{
			get
			{
				return this._CenterA;
			}
			set
			{
				if ((this._CenterA != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterAChanging(value);
					this.SendPropertyChanging();
					this._CenterA = value;
					this.SendPropertyChanged("CenterA");
					this.OnCenterAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterB", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CenterB
		{
			get
			{
				return this._CenterB;
			}
			set
			{
				if ((this._CenterB != value))
				{
					if (this._Center1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterBChanging(value);
					this.SendPropertyChanging();
					this._CenterB = value;
					this.SendPropertyChanged("CenterB");
					this.OnCenterBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkType", DbType="Int")]
		public System.Nullable<int> LinkType
		{
			get
			{
				return this._LinkType;
			}
			set
			{
				if ((this._LinkType != value))
				{
					this.OnLinkTypeChanging(value);
					this.SendPropertyChanging();
					this._LinkType = value;
					this.SendPropertyChanged("LinkType");
					this.OnLinkTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_E1Count", DbType="Int")]
		public System.Nullable<int> E1Count
		{
			get
			{
				return this._E1Count;
			}
			set
			{
				if ((this._E1Count != value))
				{
					this.OnE1CountChanging(value);
					this.SendPropertyChanging();
					this._E1Count = value;
					this.SendPropertyChanged("E1Count");
					this.OnE1CountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_CenterLink", Storage="_Center", ThisKey="CenterA", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.CenterLinks.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.CenterLinks.Add(this);
						this._CenterA = value.ID;
					}
					else
					{
						this._CenterA = default(System.Guid);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_CenterLink1", Storage="_Center1", ThisKey="CenterB", OtherKey="ID", IsForeignKey=true)]
		public Center Center1
		{
			get
			{
				return this._Center1.Entity;
			}
			set
			{
				Center previousValue = this._Center1.Entity;
				if (((previousValue != value) 
							|| (this._Center1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center1.Entity = null;
						previousValue.CenterLinks1.Remove(this);
					}
					this._Center1.Entity = value;
					if ((value != null))
					{
						value.CenterLinks1.Add(this);
						this._CenterB = value.ID;
					}
					else
					{
						this._CenterB = default(System.Guid);
					}
					this.SendPropertyChanged("Center1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Channel")]
	public partial class Channel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _LinkID;
		
		private System.Guid _RouteID;
		
		private System.Nullable<byte> _TimeSlot;
		
		private System.Nullable<int> _LNO;
		
		private System.Nullable<bool> _IsImported;
		
		private System.Nullable<bool> _IsNoc;
		
		private EntityRef<Link> _Link;
		
		private EntityRef<Route> _Route;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnLinkIDChanging(System.Nullable<System.Guid> value);
    partial void OnLinkIDChanged();
    partial void OnRouteIDChanging(System.Guid value);
    partial void OnRouteIDChanged();
    partial void OnTimeSlotChanging(System.Nullable<byte> value);
    partial void OnTimeSlotChanged();
    partial void OnLNOChanging(System.Nullable<int> value);
    partial void OnLNOChanged();
    partial void OnIsImportedChanging(System.Nullable<bool> value);
    partial void OnIsImportedChanged();
    partial void OnIsNocChanging(System.Nullable<bool> value);
    partial void OnIsNocChanged();
    #endregion
		
		public Channel()
		{
			this._Link = default(EntityRef<Link>);
			this._Route = default(EntityRef<Route>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LinkID
		{
			get
			{
				return this._LinkID;
			}
			set
			{
				if ((this._LinkID != value))
				{
					if (this._Link.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkIDChanging(value);
					this.SendPropertyChanging();
					this._LinkID = value;
					this.SendPropertyChanged("LinkID");
					this.OnLinkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeSlot", DbType="TinyInt")]
		public System.Nullable<byte> TimeSlot
		{
			get
			{
				return this._TimeSlot;
			}
			set
			{
				if ((this._TimeSlot != value))
				{
					this.OnTimeSlotChanging(value);
					this.SendPropertyChanging();
					this._TimeSlot = value;
					this.SendPropertyChanged("TimeSlot");
					this.OnTimeSlotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LNO", DbType="Int")]
		public System.Nullable<int> LNO
		{
			get
			{
				return this._LNO;
			}
			set
			{
				if ((this._LNO != value))
				{
					this.OnLNOChanging(value);
					this.SendPropertyChanging();
					this._LNO = value;
					this.SendPropertyChanged("LNO");
					this.OnLNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsImported", DbType="Bit")]
		public System.Nullable<bool> IsImported
		{
			get
			{
				return this._IsImported;
			}
			set
			{
				if ((this._IsImported != value))
				{
					this.OnIsImportedChanging(value);
					this.SendPropertyChanging();
					this._IsImported = value;
					this.SendPropertyChanged("IsImported");
					this.OnIsImportedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsNoc", DbType="Bit")]
		public System.Nullable<bool> IsNoc
		{
			get
			{
				return this._IsNoc;
			}
			set
			{
				if ((this._IsNoc != value))
				{
					this.OnIsNocChanging(value);
					this.SendPropertyChanging();
					this._IsNoc = value;
					this.SendPropertyChanged("IsNoc");
					this.OnIsNocChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_Channel", Storage="_Link", ThisKey="LinkID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Link Link
		{
			get
			{
				return this._Link.Entity;
			}
			set
			{
				Link previousValue = this._Link.Entity;
				if (((previousValue != value) 
							|| (this._Link.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Link.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._Link.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._LinkID = value.ID;
					}
					else
					{
						this._LinkID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Link");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Channel", Storage="_Route", ThisKey="RouteID", OtherKey="ID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Channels.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Channels.Add(this);
						this._RouteID = value.ID;
					}
					else
					{
						this._RouteID = default(System.Guid);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CircuitInMap")]
	public partial class CircuitInMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _X;
		
		private int _Y;
		
		private string _Title;
		
		private string _Color;
		
		private EntitySet<CircuitLink> _CircuitLinks;
		
		private EntitySet<CircuitLink> _CircuitLinks1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnXChanging(int value);
    partial void OnXChanged();
    partial void OnYChanging(int value);
    partial void OnYChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    #endregion
		
		public CircuitInMap()
		{
			this._CircuitLinks = new EntitySet<CircuitLink>(new Action<CircuitLink>(this.attach_CircuitLinks), new Action<CircuitLink>(this.detach_CircuitLinks));
			this._CircuitLinks1 = new EntitySet<CircuitLink>(new Action<CircuitLink>(this.attach_CircuitLinks1), new Action<CircuitLink>(this.detach_CircuitLinks1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Int NOT NULL")]
		public int X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Int NOT NULL")]
		public int Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CircuitInMap_CircuitLink", Storage="_CircuitLinks", ThisKey="ID", OtherKey="AMapID")]
		public EntitySet<CircuitLink> CircuitLinks
		{
			get
			{
				return this._CircuitLinks;
			}
			set
			{
				this._CircuitLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CircuitInMap_CircuitLink1", Storage="_CircuitLinks1", ThisKey="ID", OtherKey="BMapID")]
		public EntitySet<CircuitLink> CircuitLinks1
		{
			get
			{
				return this._CircuitLinks1;
			}
			set
			{
				this._CircuitLinks1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CircuitLinks(CircuitLink entity)
		{
			this.SendPropertyChanging();
			entity.CircuitInMap = this;
		}
		
		private void detach_CircuitLinks(CircuitLink entity)
		{
			this.SendPropertyChanging();
			entity.CircuitInMap = null;
		}
		
		private void attach_CircuitLinks1(CircuitLink entity)
		{
			this.SendPropertyChanging();
			entity.CircuitInMap1 = this;
		}
		
		private void detach_CircuitLinks1(CircuitLink entity)
		{
			this.SendPropertyChanging();
			entity.CircuitInMap1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CircuitLink")]
	public partial class CircuitLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Color;
		
		private string _Title;
		
		private System.Guid _CenterID;
		
		private System.Guid _AMapID;
		
		private System.Guid _BMapID;
		
		private System.Guid _CircuitID;
		
		private EntityRef<Center> _Center;
		
		private EntityRef<CircuitInMap> _CircuitInMap;
		
		private EntityRef<CircuitInMap> _CircuitInMap1;
		
		private EntityRef<Sensor> _Sensor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCenterIDChanging(System.Guid value);
    partial void OnCenterIDChanged();
    partial void OnAMapIDChanging(System.Guid value);
    partial void OnAMapIDChanged();
    partial void OnBMapIDChanging(System.Guid value);
    partial void OnBMapIDChanged();
    partial void OnCircuitIDChanging(System.Guid value);
    partial void OnCircuitIDChanged();
    #endregion
		
		public CircuitLink()
		{
			this._Center = default(EntityRef<Center>);
			this._CircuitInMap = default(EntityRef<CircuitInMap>);
			this._CircuitInMap1 = default(EntityRef<CircuitInMap>);
			this._Sensor = default(EntityRef<Sensor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMapID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AMapID
		{
			get
			{
				return this._AMapID;
			}
			set
			{
				if ((this._AMapID != value))
				{
					if (this._CircuitInMap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAMapIDChanging(value);
					this.SendPropertyChanging();
					this._AMapID = value;
					this.SendPropertyChanged("AMapID");
					this.OnAMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BMapID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BMapID
		{
			get
			{
				return this._BMapID;
			}
			set
			{
				if ((this._BMapID != value))
				{
					if (this._CircuitInMap1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBMapIDChanging(value);
					this.SendPropertyChanging();
					this._BMapID = value;
					this.SendPropertyChanged("BMapID");
					this.OnBMapIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CircuitID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CircuitID
		{
			get
			{
				return this._CircuitID;
			}
			set
			{
				if ((this._CircuitID != value))
				{
					if (this._Sensor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCircuitIDChanging(value);
					this.SendPropertyChanging();
					this._CircuitID = value;
					this.SendPropertyChanged("CircuitID");
					this.OnCircuitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_CircuitLink", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.CircuitLinks.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.CircuitLinks.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(System.Guid);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CircuitInMap_CircuitLink", Storage="_CircuitInMap", ThisKey="AMapID", OtherKey="ID", IsForeignKey=true)]
		public CircuitInMap CircuitInMap
		{
			get
			{
				return this._CircuitInMap.Entity;
			}
			set
			{
				CircuitInMap previousValue = this._CircuitInMap.Entity;
				if (((previousValue != value) 
							|| (this._CircuitInMap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CircuitInMap.Entity = null;
						previousValue.CircuitLinks.Remove(this);
					}
					this._CircuitInMap.Entity = value;
					if ((value != null))
					{
						value.CircuitLinks.Add(this);
						this._AMapID = value.ID;
					}
					else
					{
						this._AMapID = default(System.Guid);
					}
					this.SendPropertyChanged("CircuitInMap");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CircuitInMap_CircuitLink1", Storage="_CircuitInMap1", ThisKey="BMapID", OtherKey="ID", IsForeignKey=true)]
		public CircuitInMap CircuitInMap1
		{
			get
			{
				return this._CircuitInMap1.Entity;
			}
			set
			{
				CircuitInMap previousValue = this._CircuitInMap1.Entity;
				if (((previousValue != value) 
							|| (this._CircuitInMap1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CircuitInMap1.Entity = null;
						previousValue.CircuitLinks1.Remove(this);
					}
					this._CircuitInMap1.Entity = value;
					if ((value != null))
					{
						value.CircuitLinks1.Add(this);
						this._BMapID = value.ID;
					}
					else
					{
						this._BMapID = default(System.Guid);
					}
					this.SendPropertyChanged("CircuitInMap1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sensor_CircuitLink", Storage="_Sensor", ThisKey="CircuitID", OtherKey="ID", IsForeignKey=true)]
		public Sensor Sensor
		{
			get
			{
				return this._Sensor.Entity;
			}
			set
			{
				Sensor previousValue = this._Sensor.Entity;
				if (((previousValue != value) 
							|| (this._Sensor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sensor.Entity = null;
						previousValue.CircuitLinks.Remove(this);
					}
					this._Sensor.Entity = value;
					if ((value != null))
					{
						value.CircuitLinks.Add(this);
						this._CircuitID = value.ID;
					}
					else
					{
						this._CircuitID = default(System.Guid);
					}
					this.SendPropertyChanged("Sensor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DDF")]
	public partial class DDF : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<int> _Bay;
		
		private System.Nullable<int> _Position;
		
		private System.Nullable<int> _Number;
		
		private System.Nullable<System.Guid> _CenterID;
		
		private string _Description;
		
		private EntitySet<Link> _Links;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnBayChanging(System.Nullable<int> value);
    partial void OnBayChanged();
    partial void OnPositionChanging(System.Nullable<int> value);
    partial void OnPositionChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    partial void OnCenterIDChanging(System.Nullable<System.Guid> value);
    partial void OnCenterIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public DDF()
		{
			this._Links = new EntitySet<Link>(new Action<Link>(this.attach_Links), new Action<Link>(this.detach_Links));
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bay", DbType="Int")]
		public System.Nullable<int> Bay
		{
			get
			{
				return this._Bay;
			}
			set
			{
				if ((this._Bay != value))
				{
					this.OnBayChanging(value);
					this.SendPropertyChanging();
					this._Bay = value;
					this.SendPropertyChanged("Bay");
					this.OnBayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int")]
		public System.Nullable<int> Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int")]
		public System.Nullable<int> Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DDF_Link", Storage="_Links", ThisKey="ID", OtherKey="DDFID")]
		public EntitySet<Link> Links
		{
			get
			{
				return this._Links;
			}
			set
			{
				this._Links.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_DDF", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.DDFs.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.DDFs.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.DDF = this;
		}
		
		private void detach_Links(Link entity)
		{
			this.SendPropertyChanging();
			entity.DDF = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Dest")]
	public partial class Dest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _CenterID;
		
		private string _Name;
		
		private EntitySet<Route> _Routes;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCenterIDChanging(System.Nullable<System.Guid> value);
    partial void OnCenterIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Dest()
		{
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dest_Route", Storage="_Routes", ThisKey="ID", OtherKey="DestID")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Dest", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.Dests.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.Dests.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Dest = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Dest = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Event")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Reporter;
		
		private System.Nullable<System.Guid> _Type;
		
		private System.Nullable<System.DateTime> _Time;
		
		private System.Nullable<bool> _IsLocked;
		
		private string _Comment;
		
		private System.Nullable<int> _Shift;
		
		private EntityRef<EventType> _EventType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnReporterChanging(System.Nullable<System.Guid> value);
    partial void OnReporterChanged();
    partial void OnTypeChanging(System.Nullable<System.Guid> value);
    partial void OnTypeChanged();
    partial void OnTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnTimeChanged();
    partial void OnIsLockedChanging(System.Nullable<bool> value);
    partial void OnIsLockedChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnShiftChanging(System.Nullable<int> value);
    partial void OnShiftChanged();
    #endregion
		
		public Event()
		{
			this._EventType = default(EntityRef<EventType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reporter", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Reporter
		{
			get
			{
				return this._Reporter;
			}
			set
			{
				if ((this._Reporter != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReporterChanging(value);
					this.SendPropertyChanging();
					this._Reporter = value;
					this.SendPropertyChanged("Reporter");
					this.OnReporterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._EventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLocked", DbType="Bit")]
		public System.Nullable<bool> IsLocked
		{
			get
			{
				return this._IsLocked;
			}
			set
			{
				if ((this._IsLocked != value))
				{
					this.OnIsLockedChanging(value);
					this.SendPropertyChanging();
					this._IsLocked = value;
					this.SendPropertyChanged("IsLocked");
					this.OnIsLockedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shift", DbType="Int")]
		public System.Nullable<int> Shift
		{
			get
			{
				return this._Shift;
			}
			set
			{
				if ((this._Shift != value))
				{
					this.OnShiftChanging(value);
					this.SendPropertyChanging();
					this._Shift = value;
					this.SendPropertyChanged("Shift");
					this.OnShiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_EventType", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
		public EventType EventType
		{
			get
			{
				return this._EventType.Entity;
			}
			set
			{
				EventType previousValue = this._EventType.Entity;
				if (((previousValue != value) 
							|| (this._EventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EventType.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._EventType.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._Type = value.ID;
					}
					else
					{
						this._Type = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("EventType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Event", Storage="_User", ThisKey="Reporter", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Events.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Events.Add(this);
						this._Reporter = value.ID;
					}
					else
					{
						this._Reporter = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventType")]
	public partial class EventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private EntitySet<Event> _Events;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EventType()
		{
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EventType_Event", Storage="_Events", ThisKey="ID", OtherKey="Type")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.EventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FailureReason")]
	public partial class FailureReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FailureReason()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Instruction")]
	public partial class Instruction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Ineffect;
		
		private string _Number;
		
		private System.Nullable<System.DateTime> _IssueDate;
		
		private string _Issuer;
		
		private System.Nullable<System.Guid> _Source;
		
		private System.Nullable<System.Guid> _Destination;
		
		private System.Nullable<int> _InstructionType;
		
		private System.Nullable<System.DateTime> _ExecutionDate;
		
		private System.Nullable<System.Guid> _Executer;
		
		private System.Nullable<System.DateTime> _AssignmentDate;
		
		private System.Data.Linq.Binary _Image;
		
		private string _Description;
		
		private System.Nullable<bool> _IsDone;
		
		private EntitySet<Route> _Routes;
		
		private EntityRef<Center> _Center;
		
		private EntityRef<Center> _Center1;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnIneffectChanging(string value);
    partial void OnIneffectChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnIssueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnIssueDateChanged();
    partial void OnIssuerChanging(string value);
    partial void OnIssuerChanged();
    partial void OnSourceChanging(System.Nullable<System.Guid> value);
    partial void OnSourceChanged();
    partial void OnDestinationChanging(System.Nullable<System.Guid> value);
    partial void OnDestinationChanged();
    partial void OnInstructionTypeChanging(System.Nullable<int> value);
    partial void OnInstructionTypeChanged();
    partial void OnExecutionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExecutionDateChanged();
    partial void OnExecuterChanging(System.Nullable<System.Guid> value);
    partial void OnExecuterChanged();
    partial void OnAssignmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAssignmentDateChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsDoneChanging(System.Nullable<bool> value);
    partial void OnIsDoneChanged();
    #endregion
		
		public Instruction()
		{
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			this._Center = default(EntityRef<Center>);
			this._Center1 = default(EntityRef<Center>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ineffect", DbType="NVarChar(10)")]
		public string Ineffect
		{
			get
			{
				return this._Ineffect;
			}
			set
			{
				if ((this._Ineffect != value))
				{
					this.OnIneffectChanging(value);
					this.SendPropertyChanging();
					this._Ineffect = value;
					this.SendPropertyChanged("Ineffect");
					this.OnIneffectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(20)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IssueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> IssueDate
		{
			get
			{
				return this._IssueDate;
			}
			set
			{
				if ((this._IssueDate != value))
				{
					this.OnIssueDateChanging(value);
					this.SendPropertyChanging();
					this._IssueDate = value;
					this.SendPropertyChanged("IssueDate");
					this.OnIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Issuer", DbType="NVarChar(30)")]
		public string Issuer
		{
			get
			{
				return this._Issuer;
			}
			set
			{
				if ((this._Issuer != value))
				{
					this.OnIssuerChanging(value);
					this.SendPropertyChanging();
					this._Issuer = value;
					this.SendPropertyChanged("Issuer");
					this.OnIssuerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Source", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Source
		{
			get
			{
				return this._Source;
			}
			set
			{
				if ((this._Source != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceChanging(value);
					this.SendPropertyChanging();
					this._Source = value;
					this.SendPropertyChanged("Source");
					this.OnSourceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Destination", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Destination
		{
			get
			{
				return this._Destination;
			}
			set
			{
				if ((this._Destination != value))
				{
					if (this._Center1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestinationChanging(value);
					this.SendPropertyChanging();
					this._Destination = value;
					this.SendPropertyChanged("Destination");
					this.OnDestinationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructionType", DbType="Int")]
		public System.Nullable<int> InstructionType
		{
			get
			{
				return this._InstructionType;
			}
			set
			{
				if ((this._InstructionType != value))
				{
					this.OnInstructionTypeChanging(value);
					this.SendPropertyChanging();
					this._InstructionType = value;
					this.SendPropertyChanged("InstructionType");
					this.OnInstructionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExecutionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExecutionDate
		{
			get
			{
				return this._ExecutionDate;
			}
			set
			{
				if ((this._ExecutionDate != value))
				{
					this.OnExecutionDateChanging(value);
					this.SendPropertyChanging();
					this._ExecutionDate = value;
					this.SendPropertyChanged("ExecutionDate");
					this.OnExecutionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Executer", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Executer
		{
			get
			{
				return this._Executer;
			}
			set
			{
				if ((this._Executer != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExecuterChanging(value);
					this.SendPropertyChanging();
					this._Executer = value;
					this.SendPropertyChanged("Executer");
					this.OnExecuterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssignmentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AssignmentDate
		{
			get
			{
				return this._AssignmentDate;
			}
			set
			{
				if ((this._AssignmentDate != value))
				{
					this.OnAssignmentDateChanging(value);
					this.SendPropertyChanging();
					this._AssignmentDate = value;
					this.SendPropertyChanged("AssignmentDate");
					this.OnAssignmentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDone", DbType="Bit")]
		public System.Nullable<bool> IsDone
		{
			get
			{
				return this._IsDone;
			}
			set
			{
				if ((this._IsDone != value))
				{
					this.OnIsDoneChanging(value);
					this.SendPropertyChanging();
					this._IsDone = value;
					this.SendPropertyChanged("IsDone");
					this.OnIsDoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instruction_Route", Storage="_Routes", ThisKey="ID", OtherKey="InstructionID")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Instruction", Storage="_Center", ThisKey="Source", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.Instructions.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.Instructions.Add(this);
						this._Source = value.ID;
					}
					else
					{
						this._Source = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Instruction1", Storage="_Center1", ThisKey="Destination", OtherKey="ID", IsForeignKey=true)]
		public Center Center1
		{
			get
			{
				return this._Center1.Entity;
			}
			set
			{
				Center previousValue = this._Center1.Entity;
				if (((previousValue != value) 
							|| (this._Center1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center1.Entity = null;
						previousValue.Instructions1.Remove(this);
					}
					this._Center1.Entity = value;
					if ((value != null))
					{
						value.Instructions1.Add(this);
						this._Destination = value.ID;
					}
					else
					{
						this._Destination = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Instruction", Storage="_User", ThisKey="Executer", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Instructions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Instructions.Add(this);
						this._Executer = value.ID;
					}
					else
					{
						this._Executer = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Instruction = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.Instruction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Link")]
	public partial class Link : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _CardID;
		
		private string _LTG;
		
		private System.Nullable<int> _DIU;
		
		private string _Address;
		
		private System.Nullable<long> _Sys;
		
		private System.Nullable<int> _CIC;
		
		private System.Nullable<System.Guid> _DDFID;
		
		private string _Description;
		
		private System.Nullable<bool> _IsImported;
		
		private System.Nullable<System.Guid> _CenterID;
		
		private EntitySet<Alarm> _Alarms;
		
		private EntitySet<Channel> _Channels;
		
		private EntityRef<Card> _Card;
		
		private EntityRef<Center> _Center;
		
		private EntityRef<DDF> _DDF;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCardIDChanging(System.Nullable<System.Guid> value);
    partial void OnCardIDChanged();
    partial void OnLTGChanging(string value);
    partial void OnLTGChanged();
    partial void OnDIUChanging(System.Nullable<int> value);
    partial void OnDIUChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnSysChanging(System.Nullable<long> value);
    partial void OnSysChanged();
    partial void OnCICChanging(System.Nullable<int> value);
    partial void OnCICChanged();
    partial void OnDDFIDChanging(System.Nullable<System.Guid> value);
    partial void OnDDFIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsImportedChanging(System.Nullable<bool> value);
    partial void OnIsImportedChanged();
    partial void OnCenterIDChanging(System.Nullable<System.Guid> value);
    partial void OnCenterIDChanged();
    #endregion
		
		public Link()
		{
			this._Alarms = new EntitySet<Alarm>(new Action<Alarm>(this.attach_Alarms), new Action<Alarm>(this.detach_Alarms));
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			this._Card = default(EntityRef<Card>);
			this._Center = default(EntityRef<Center>);
			this._DDF = default(EntityRef<DDF>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CardID
		{
			get
			{
				return this._CardID;
			}
			set
			{
				if ((this._CardID != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardIDChanging(value);
					this.SendPropertyChanging();
					this._CardID = value;
					this.SendPropertyChanged("CardID");
					this.OnCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LTG", DbType="VarChar(10)")]
		public string LTG
		{
			get
			{
				return this._LTG;
			}
			set
			{
				if ((this._LTG != value))
				{
					this.OnLTGChanging(value);
					this.SendPropertyChanging();
					this._LTG = value;
					this.SendPropertyChanged("LTG");
					this.OnLTGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DIU", DbType="Int")]
		public System.Nullable<int> DIU
		{
			get
			{
				return this._DIU;
			}
			set
			{
				if ((this._DIU != value))
				{
					this.OnDIUChanging(value);
					this.SendPropertyChanging();
					this._DIU = value;
					this.SendPropertyChanged("DIU");
					this.OnDIUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(20)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sys", DbType="BigInt")]
		public System.Nullable<long> Sys
		{
			get
			{
				return this._Sys;
			}
			set
			{
				if ((this._Sys != value))
				{
					this.OnSysChanging(value);
					this.SendPropertyChanging();
					this._Sys = value;
					this.SendPropertyChanged("Sys");
					this.OnSysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CIC", DbType="Int")]
		public System.Nullable<int> CIC
		{
			get
			{
				return this._CIC;
			}
			set
			{
				if ((this._CIC != value))
				{
					this.OnCICChanging(value);
					this.SendPropertyChanging();
					this._CIC = value;
					this.SendPropertyChanged("CIC");
					this.OnCICChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DDFID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DDFID
		{
			get
			{
				return this._DDFID;
			}
			set
			{
				if ((this._DDFID != value))
				{
					if (this._DDF.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDDFIDChanging(value);
					this.SendPropertyChanging();
					this._DDFID = value;
					this.SendPropertyChanged("DDFID");
					this.OnDDFIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsImported", DbType="Bit")]
		public System.Nullable<bool> IsImported
		{
			get
			{
				return this._IsImported;
			}
			set
			{
				if ((this._IsImported != value))
				{
					this.OnIsImportedChanging(value);
					this.SendPropertyChanging();
					this._IsImported = value;
					this.SendPropertyChanged("IsImported");
					this.OnIsImportedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_Alarm", Storage="_Alarms", ThisKey="ID", OtherKey="FailedLink")]
		public EntitySet<Alarm> Alarms
		{
			get
			{
				return this._Alarms;
			}
			set
			{
				this._Alarms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Link_Channel", Storage="_Channels", ThisKey="ID", OtherKey="LinkID")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_Link", Storage="_Card", ThisKey="CardID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.Links.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.Links.Add(this);
						this._CardID = value.ID;
					}
					else
					{
						this._CardID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Link", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.Links.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.Links.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DDF_Link", Storage="_DDF", ThisKey="DDFID", OtherKey="ID", IsForeignKey=true)]
		public DDF DDF
		{
			get
			{
				return this._DDF.Entity;
			}
			set
			{
				DDF previousValue = this._DDF.Entity;
				if (((previousValue != value) 
							|| (this._DDF.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DDF.Entity = null;
						previousValue.Links.Remove(this);
					}
					this._DDF.Entity = value;
					if ((value != null))
					{
						value.Links.Add(this);
						this._DDFID = value.ID;
					}
					else
					{
						this._DDFID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("DDF");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alarms(Alarm entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_Alarms(Alarm entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Link = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Link = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LongRecord")]
	public partial class LongRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _UserID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<System.Guid> _RouteID;
		
		private string _ANumber;
		
		private string _BNumber;
		
		private System.Nullable<long> _Channel;
		
		private System.Nullable<int> _State;
		
		private System.Nullable<int> _Length;
		
		private string _Description;
		
		private System.Nullable<int> _Shift;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnRouteIDChanging(System.Nullable<System.Guid> value);
    partial void OnRouteIDChanged();
    partial void OnANumberChanging(string value);
    partial void OnANumberChanged();
    partial void OnBNumberChanging(string value);
    partial void OnBNumberChanged();
    partial void OnChannelChanging(System.Nullable<long> value);
    partial void OnChannelChanged();
    partial void OnStateChanging(System.Nullable<int> value);
    partial void OnStateChanged();
    partial void OnLengthChanging(System.Nullable<int> value);
    partial void OnLengthChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnShiftChanging(System.Nullable<int> value);
    partial void OnShiftChanged();
    #endregion
		
		public LongRecord()
		{
			this._Route = default(EntityRef<Route>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ANumber", DbType="VarChar(20)")]
		public string ANumber
		{
			get
			{
				return this._ANumber;
			}
			set
			{
				if ((this._ANumber != value))
				{
					this.OnANumberChanging(value);
					this.SendPropertyChanging();
					this._ANumber = value;
					this.SendPropertyChanged("ANumber");
					this.OnANumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BNumber", DbType="VarChar(20)")]
		public string BNumber
		{
			get
			{
				return this._BNumber;
			}
			set
			{
				if ((this._BNumber != value))
				{
					this.OnBNumberChanging(value);
					this.SendPropertyChanging();
					this._BNumber = value;
					this.SendPropertyChanged("BNumber");
					this.OnBNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Channel", DbType="BigInt")]
		public System.Nullable<long> Channel
		{
			get
			{
				return this._Channel;
			}
			set
			{
				if ((this._Channel != value))
				{
					this.OnChannelChanging(value);
					this.SendPropertyChanging();
					this._Channel = value;
					this.SendPropertyChanged("Channel");
					this.OnChannelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int")]
		public System.Nullable<int> State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Int")]
		public System.Nullable<int> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shift", DbType="Int")]
		public System.Nullable<int> Shift
		{
			get
			{
				return this._Shift;
			}
			set
			{
				if ((this._Shift != value))
				{
					this.OnShiftChanging(value);
					this.SendPropertyChanging();
					this._Shift = value;
					this.SendPropertyChanged("Shift");
					this.OnShiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_LongRecord", Storage="_Route", ThisKey="RouteID", OtherKey="ID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.LongRecords.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.LongRecords.Add(this);
						this._RouteID = value.ID;
					}
					else
					{
						this._RouteID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LongRecord", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LongRecords.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LongRecords.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OPM")]
	public partial class OPM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Route> _Routes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public OPM()
		{
			this._Routes = new EntitySet<Route>(new Action<Route>(this.attach_Routes), new Action<Route>(this.detach_Routes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OPM_Route", Storage="_Routes", ThisKey="ID", OtherKey="OPMID")]
		public EntitySet<Route> Routes
		{
			get
			{
				return this._Routes;
			}
			set
			{
				this._Routes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.OPM = this;
		}
		
		private void detach_Routes(Route entity)
		{
			this.SendPropertyChanging();
			entity.OPM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Permission")]
	public partial class Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionID;
		
		private System.Nullable<int> _ParentPermissionID;
		
		private string _Name;
		
		private string _Title;
		
		private EntitySet<Permission> _Permissions;
		
		private EntitySet<RolePermission> _RolePermissions;
		
		private EntityRef<Permission> _Permission1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    partial void OnParentPermissionIDChanging(System.Nullable<int> value);
    partial void OnParentPermissionIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    #endregion
		
		public Permission()
		{
			this._Permissions = new EntitySet<Permission>(new Action<Permission>(this.attach_Permissions), new Action<Permission>(this.detach_Permissions));
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			this._Permission1 = default(EntityRef<Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentPermissionID", DbType="Int")]
		public System.Nullable<int> ParentPermissionID
		{
			get
			{
				return this._ParentPermissionID;
			}
			set
			{
				if ((this._ParentPermissionID != value))
				{
					if (this._Permission1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._ParentPermissionID = value;
					this.SendPropertyChanged("ParentPermissionID");
					this.OnParentPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_Permission", Storage="_Permissions", ThisKey="PermissionID", OtherKey="ParentPermissionID")]
		public EntitySet<Permission> Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				this._Permissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_RolePermissions", ThisKey="PermissionID", OtherKey="PermissionID")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_Permission", Storage="_Permission1", ThisKey="ParentPermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Permission Permission1
		{
			get
			{
				return this._Permission1.Entity;
			}
			set
			{
				Permission previousValue = this._Permission1.Entity;
				if (((previousValue != value) 
							|| (this._Permission1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission1.Entity = null;
						previousValue.Permissions.Remove(this);
					}
					this._Permission1.Entity = value;
					if ((value != null))
					{
						value.Permissions.Add(this);
						this._ParentPermissionID = value.PermissionID;
					}
					else
					{
						this._ParentPermissionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Permission1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Permission1 = this;
		}
		
		private void detach_Permissions(Permission entity)
		{
			this.SendPropertyChanging();
			entity.Permission1 = null;
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rack")]
	public partial class Rack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _Type;
		
		private System.Guid _CenterID;
		
		private System.Nullable<double> _X;
		
		private System.Nullable<double> _Y;
		
		private string _Name;
		
		private EntitySet<Shelf> _Shelfs;
		
		private EntityRef<Center> _Center;
		
		private EntityRef<RackType> _RackType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTypeChanging(System.Guid value);
    partial void OnTypeChanged();
    partial void OnCenterIDChanging(System.Guid value);
    partial void OnCenterIDChanged();
    partial void OnXChanging(System.Nullable<double> value);
    partial void OnXChanged();
    partial void OnYChanging(System.Nullable<double> value);
    partial void OnYChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Rack()
		{
			this._Shelfs = new EntitySet<Shelf>(new Action<Shelf>(this.attach_Shelfs), new Action<Shelf>(this.detach_Shelfs));
			this._Center = default(EntityRef<Center>);
			this._RackType = default(EntityRef<RackType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._RackType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_X", DbType="Float")]
		public System.Nullable<double> X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Y", DbType="Float")]
		public System.Nullable<double> Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rack_Shelf", Storage="_Shelfs", ThisKey="ID", OtherKey="RackID")]
		public EntitySet<Shelf> Shelfs
		{
			get
			{
				return this._Shelfs;
			}
			set
			{
				this._Shelfs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Rack", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.Racks.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.Racks.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(System.Guid);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RackType_Rack", Storage="_RackType", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
		public RackType RackType
		{
			get
			{
				return this._RackType.Entity;
			}
			set
			{
				RackType previousValue = this._RackType.Entity;
				if (((previousValue != value) 
							|| (this._RackType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RackType.Entity = null;
						previousValue.Racks.Remove(this);
					}
					this._RackType.Entity = value;
					if ((value != null))
					{
						value.Racks.Add(this);
						this._Type = value.ID;
					}
					else
					{
						this._Type = default(System.Guid);
					}
					this.SendPropertyChanged("RackType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Shelfs(Shelf entity)
		{
			this.SendPropertyChanging();
			entity.Rack = this;
		}
		
		private void detach_Shelfs(Shelf entity)
		{
			this.SendPropertyChanging();
			entity.Rack = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RackShelf")]
	public partial class RackShelf : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _RackTypeID;
		
		private System.Guid _ShelfTypeID;
		
		private EntityRef<RackType> _RackType;
		
		private EntityRef<ShelfType> _ShelfType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRackTypeIDChanging(System.Guid value);
    partial void OnRackTypeIDChanged();
    partial void OnShelfTypeIDChanging(System.Guid value);
    partial void OnShelfTypeIDChanged();
    #endregion
		
		public RackShelf()
		{
			this._RackType = default(EntityRef<RackType>);
			this._ShelfType = default(EntityRef<ShelfType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RackTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RackTypeID
		{
			get
			{
				return this._RackTypeID;
			}
			set
			{
				if ((this._RackTypeID != value))
				{
					if (this._RackType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRackTypeIDChanging(value);
					this.SendPropertyChanging();
					this._RackTypeID = value;
					this.SendPropertyChanged("RackTypeID");
					this.OnRackTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelfTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ShelfTypeID
		{
			get
			{
				return this._ShelfTypeID;
			}
			set
			{
				if ((this._ShelfTypeID != value))
				{
					if (this._ShelfType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShelfTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ShelfTypeID = value;
					this.SendPropertyChanged("ShelfTypeID");
					this.OnShelfTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RackType_RackShelf", Storage="_RackType", ThisKey="RackTypeID", OtherKey="ID", IsForeignKey=true)]
		public RackType RackType
		{
			get
			{
				return this._RackType.Entity;
			}
			set
			{
				RackType previousValue = this._RackType.Entity;
				if (((previousValue != value) 
							|| (this._RackType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RackType.Entity = null;
						previousValue.RackShelfs.Remove(this);
					}
					this._RackType.Entity = value;
					if ((value != null))
					{
						value.RackShelfs.Add(this);
						this._RackTypeID = value.ID;
					}
					else
					{
						this._RackTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("RackType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShelfType_RackShelf", Storage="_ShelfType", ThisKey="ShelfTypeID", OtherKey="ID", IsForeignKey=true)]
		public ShelfType ShelfType
		{
			get
			{
				return this._ShelfType.Entity;
			}
			set
			{
				ShelfType previousValue = this._ShelfType.Entity;
				if (((previousValue != value) 
							|| (this._ShelfType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShelfType.Entity = null;
						previousValue.RackShelfs.Remove(this);
					}
					this._ShelfType.Entity = value;
					if ((value != null))
					{
						value.RackShelfs.Add(this);
						this._ShelfTypeID = value.ID;
					}
					else
					{
						this._ShelfTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("ShelfType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RackType")]
	public partial class RackType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _SupportingSwitch;
		
		private System.Nullable<int> _Capacity;
		
		private System.Nullable<bool> _IsDouble;
		
		private EntitySet<Rack> _Racks;
		
		private EntitySet<RackShelf> _RackShelfs;
		
		private EntityRef<SwitchType> _SwitchType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSupportingSwitchChanging(System.Guid value);
    partial void OnSupportingSwitchChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    partial void OnIsDoubleChanging(System.Nullable<bool> value);
    partial void OnIsDoubleChanged();
    #endregion
		
		public RackType()
		{
			this._Racks = new EntitySet<Rack>(new Action<Rack>(this.attach_Racks), new Action<Rack>(this.detach_Racks));
			this._RackShelfs = new EntitySet<RackShelf>(new Action<RackShelf>(this.attach_RackShelfs), new Action<RackShelf>(this.detach_RackShelfs));
			this._SwitchType = default(EntityRef<SwitchType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportingSwitch", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SupportingSwitch
		{
			get
			{
				return this._SupportingSwitch;
			}
			set
			{
				if ((this._SupportingSwitch != value))
				{
					if (this._SwitchType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupportingSwitchChanging(value);
					this.SendPropertyChanging();
					this._SupportingSwitch = value;
					this.SendPropertyChanged("SupportingSwitch");
					this.OnSupportingSwitchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDouble", DbType="Bit")]
		public System.Nullable<bool> IsDouble
		{
			get
			{
				return this._IsDouble;
			}
			set
			{
				if ((this._IsDouble != value))
				{
					this.OnIsDoubleChanging(value);
					this.SendPropertyChanging();
					this._IsDouble = value;
					this.SendPropertyChanged("IsDouble");
					this.OnIsDoubleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RackType_Rack", Storage="_Racks", ThisKey="ID", OtherKey="Type")]
		public EntitySet<Rack> Racks
		{
			get
			{
				return this._Racks;
			}
			set
			{
				this._Racks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RackType_RackShelf", Storage="_RackShelfs", ThisKey="ID", OtherKey="RackTypeID")]
		public EntitySet<RackShelf> RackShelfs
		{
			get
			{
				return this._RackShelfs;
			}
			set
			{
				this._RackShelfs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_RackType", Storage="_SwitchType", ThisKey="SupportingSwitch", OtherKey="ID", IsForeignKey=true)]
		public SwitchType SwitchType
		{
			get
			{
				return this._SwitchType.Entity;
			}
			set
			{
				SwitchType previousValue = this._SwitchType.Entity;
				if (((previousValue != value) 
							|| (this._SwitchType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SwitchType.Entity = null;
						previousValue.RackTypes.Remove(this);
					}
					this._SwitchType.Entity = value;
					if ((value != null))
					{
						value.RackTypes.Add(this);
						this._SupportingSwitch = value.ID;
					}
					else
					{
						this._SupportingSwitch = default(System.Guid);
					}
					this.SendPropertyChanged("SwitchType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Racks(Rack entity)
		{
			this.SendPropertyChanging();
			entity.RackType = this;
		}
		
		private void detach_Racks(Rack entity)
		{
			this.SendPropertyChanging();
			entity.RackType = null;
		}
		
		private void attach_RackShelfs(RackShelf entity)
		{
			this.SendPropertyChanging();
			entity.RackType = this;
		}
		
		private void detach_RackShelfs(RackShelf entity)
		{
			this.SendPropertyChanging();
			entity.RackType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Region")]
	public partial class Region : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private EntitySet<Center> _Centers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Region()
		{
			this._Centers = new EntitySet<Center>(new Action<Center>(this.attach_Centers), new Action<Center>(this.detach_Centers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Region_Center", Storage="_Centers", ThisKey="ID", OtherKey="RegionID")]
		public EntitySet<Center> Centers
		{
			get
			{
				return this._Centers;
			}
			set
			{
				this._Centers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Centers(Center entity)
		{
			this.SendPropertyChanging();
			entity.Region = this;
		}
		
		private void detach_Centers(Center entity)
		{
			this.SendPropertyChanging();
			entity.Region = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Report")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<System.Guid> _UserID;
		
		private System.Nullable<int> _Shift;
		
		private string _Description;
		
		private string _Miscellaneous;
		
		private System.Nullable<System.Guid> _CenterID;
		
		private EntitySet<ReportItem> _ReportItems;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnUserIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserIDChanged();
    partial void OnShiftChanging(System.Nullable<int> value);
    partial void OnShiftChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnMiscellaneousChanging(string value);
    partial void OnMiscellaneousChanged();
    partial void OnCenterIDChanging(System.Nullable<System.Guid> value);
    partial void OnCenterIDChanged();
    #endregion
		
		public Report()
		{
			this._ReportItems = new EntitySet<ReportItem>(new Action<ReportItem>(this.attach_ReportItems), new Action<ReportItem>(this.detach_ReportItems));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shift", DbType="Int")]
		public System.Nullable<int> Shift
		{
			get
			{
				return this._Shift;
			}
			set
			{
				if ((this._Shift != value))
				{
					this.OnShiftChanging(value);
					this.SendPropertyChanging();
					this._Shift = value;
					this.SendPropertyChanged("Shift");
					this.OnShiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Miscellaneous", DbType="NVarChar(255)")]
		public string Miscellaneous
		{
			get
			{
				return this._Miscellaneous;
			}
			set
			{
				if ((this._Miscellaneous != value))
				{
					this.OnMiscellaneousChanging(value);
					this.SendPropertyChanging();
					this._Miscellaneous = value;
					this.SendPropertyChanged("Miscellaneous");
					this.OnMiscellaneousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportItem", Storage="_ReportItems", ThisKey="ID", OtherKey="ReportID")]
		public EntitySet<ReportItem> ReportItems
		{
			get
			{
				return this._ReportItems;
			}
			set
			{
				this._ReportItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Report", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Reports.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Reports.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportItems(ReportItem entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportItems(ReportItem entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportItem")]
	public partial class ReportItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _ReportTypeID;
		
		private string _Value;
		
		private System.Nullable<System.Guid> _ReportID;
		
		private EntityRef<Report> _Report;
		
		private EntityRef<ReportType> _ReportType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnReportTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnReportTypeIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnReportIDChanging(System.Nullable<System.Guid> value);
    partial void OnReportIDChanged();
    #endregion
		
		public ReportItem()
		{
			this._Report = default(EntityRef<Report>);
			this._ReportType = default(EntityRef<ReportType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReportTypeID
		{
			get
			{
				return this._ReportTypeID;
			}
			set
			{
				if ((this._ReportTypeID != value))
				{
					if (this._ReportType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ReportTypeID = value;
					this.SendPropertyChanged("ReportTypeID");
					this.OnReportTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportItem", Storage="_Report", ThisKey="ReportID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportItems.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportItems.Add(this);
						this._ReportID = value.ID;
					}
					else
					{
						this._ReportID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportType_ReportItem", Storage="_ReportType", ThisKey="ReportTypeID", OtherKey="ID", IsForeignKey=true)]
		public ReportType ReportType
		{
			get
			{
				return this._ReportType.Entity;
			}
			set
			{
				ReportType previousValue = this._ReportType.Entity;
				if (((previousValue != value) 
							|| (this._ReportType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ReportType.Entity = null;
						previousValue.ReportItems.Remove(this);
					}
					this._ReportType.Entity = value;
					if ((value != null))
					{
						value.ReportItems.Add(this);
						this._ReportTypeID = value.ID;
					}
					else
					{
						this._ReportTypeID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ReportType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportType")]
	public partial class ReportType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _SwitchTypeID;
		
		private string _DefaultValue;
		
		private System.Nullable<int> _Rank;
		
		private EntitySet<ReportItem> _ReportItems;
		
		private EntityRef<SwitchType> _SwitchType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSwitchTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnSwitchTypeIDChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnRankChanging(System.Nullable<int> value);
    partial void OnRankChanged();
    #endregion
		
		public ReportType()
		{
			this._ReportItems = new EntitySet<ReportItem>(new Action<ReportItem>(this.attach_ReportItems), new Action<ReportItem>(this.detach_ReportItems));
			this._SwitchType = default(EntityRef<SwitchType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SwitchTypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SwitchTypeID
		{
			get
			{
				return this._SwitchTypeID;
			}
			set
			{
				if ((this._SwitchTypeID != value))
				{
					if (this._SwitchType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSwitchTypeIDChanging(value);
					this.SendPropertyChanging();
					this._SwitchTypeID = value;
					this.SendPropertyChanged("SwitchTypeID");
					this.OnSwitchTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultValue", DbType="NVarChar(50)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rank", DbType="Int")]
		public System.Nullable<int> Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ReportType_ReportItem", Storage="_ReportItems", ThisKey="ID", OtherKey="ReportTypeID")]
		public EntitySet<ReportItem> ReportItems
		{
			get
			{
				return this._ReportItems;
			}
			set
			{
				this._ReportItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_ReportType", Storage="_SwitchType", ThisKey="SwitchTypeID", OtherKey="ID", IsForeignKey=true)]
		public SwitchType SwitchType
		{
			get
			{
				return this._SwitchType.Entity;
			}
			set
			{
				SwitchType previousValue = this._SwitchType.Entity;
				if (((previousValue != value) 
							|| (this._SwitchType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SwitchType.Entity = null;
						previousValue.ReportTypes.Remove(this);
					}
					this._SwitchType.Entity = value;
					if ((value != null))
					{
						value.ReportTypes.Add(this);
						this._SwitchTypeID = value.ID;
					}
					else
					{
						this._SwitchTypeID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SwitchType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportItems(ReportItem entity)
		{
			this.SendPropertyChanging();
			entity.ReportType = this;
		}
		
		private void detach_ReportItems(ReportItem entity)
		{
			this.SendPropertyChanging();
			entity.ReportType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<RolePermission> _RolePermissions;
		
		private EntitySet<UserRoleRelation> _UserRoleRelations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Role()
		{
			this._RolePermissions = new EntitySet<RolePermission>(new Action<RolePermission>(this.attach_RolePermissions), new Action<RolePermission>(this.detach_RolePermissions));
			this._UserRoleRelations = new EntitySet<UserRoleRelation>(new Action<UserRoleRelation>(this.attach_UserRoleRelations), new Action<UserRoleRelation>(this.detach_UserRoleRelations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_RolePermissions", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<RolePermission> RolePermissions
		{
			get
			{
				return this._RolePermissions;
			}
			set
			{
				this._RolePermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRoleRelation", Storage="_UserRoleRelations", ThisKey="ID", OtherKey="RoleID")]
		public EntitySet<UserRoleRelation> UserRoleRelations
		{
			get
			{
				return this._UserRoleRelations;
			}
			set
			{
				this._UserRoleRelations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_RolePermissions(RolePermission entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
		
		private void attach_UserRoleRelations(UserRoleRelation entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserRoleRelations(UserRoleRelation entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RolePermission")]
	public partial class RolePermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RoleID;
		
		private int _PermissionID;
		
		private EntityRef<Permission> _Permission;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(string value);
    partial void OnRoleIDChanged();
    partial void OnPermissionIDChanging(int value);
    partial void OnPermissionIDChanged();
    #endregion
		
		public RolePermission()
		{
			this._Permission = default(EntityRef<Permission>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PermissionID
		{
			get
			{
				return this._PermissionID;
			}
			set
			{
				if ((this._PermissionID != value))
				{
					if (this._Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._PermissionID = value;
					this.SendPropertyChanged("PermissionID");
					this.OnPermissionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Permission_RolePermission", Storage="_Permission", ThisKey="PermissionID", OtherKey="PermissionID", IsForeignKey=true)]
		public Permission Permission
		{
			get
			{
				return this._Permission.Entity;
			}
			set
			{
				Permission previousValue = this._Permission.Entity;
				if (((previousValue != value) 
							|| (this._Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Permission.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Permission.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._PermissionID = value.PermissionID;
					}
					else
					{
						this._PermissionID = default(int);
					}
					this.SendPropertyChanged("Permission");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_RolePermission", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.RolePermissions.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.RolePermissions.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(string);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _CenterID;
		
		private EntitySet<Sensor> _Sensors;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCenterIDChanging(System.Nullable<System.Guid> value);
    partial void OnCenterIDChanged();
    #endregion
		
		public Room()
		{
			this._Sensors = new EntitySet<Sensor>(new Action<Sensor>(this.attach_Sensors), new Action<Sensor>(this.detach_Sensors));
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Sensor", Storage="_Sensors", ThisKey="ID", OtherKey="RoomID")]
		public EntitySet<Sensor> Sensors
		{
			get
			{
				return this._Sensors;
			}
			set
			{
				this._Sensors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Room", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.Rooms.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.Rooms.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sensors(Sensor entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Sensors(Sensor entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Route")]
	public partial class Route : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<int> _Protocol;
		
		private string _RouteName;
		
		private string _TGNO;
		
		private System.Nullable<System.Guid> _InstructionID;
		
		private System.Nullable<bool> _IsSignaling;
		
		private System.Nullable<int> _OPMID;
		
		private System.Nullable<bool> _IsImported;
		
		private System.Nullable<System.Guid> _SourceCenter;
		
		private System.Nullable<System.Guid> _DestID;
		
		private EntitySet<Alarm> _Alarms;
		
		private EntitySet<Channel> _Channels;
		
		private EntitySet<LongRecord> _LongRecords;
		
		private EntitySet<Task> _Tasks;
		
		private EntityRef<Dest> _Dest;
		
		private EntityRef<Instruction> _Instruction;
		
		private EntityRef<OPM> _OPM;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnProtocolChanging(System.Nullable<int> value);
    partial void OnProtocolChanged();
    partial void OnRouteNameChanging(string value);
    partial void OnRouteNameChanged();
    partial void OnTGNOChanging(string value);
    partial void OnTGNOChanged();
    partial void OnInstructionIDChanging(System.Nullable<System.Guid> value);
    partial void OnInstructionIDChanged();
    partial void OnIsSignalingChanging(System.Nullable<bool> value);
    partial void OnIsSignalingChanged();
    partial void OnOPMIDChanging(System.Nullable<int> value);
    partial void OnOPMIDChanged();
    partial void OnIsImportedChanging(System.Nullable<bool> value);
    partial void OnIsImportedChanged();
    partial void OnSourceCenterChanging(System.Nullable<System.Guid> value);
    partial void OnSourceCenterChanged();
    partial void OnDestIDChanging(System.Nullable<System.Guid> value);
    partial void OnDestIDChanged();
    #endregion
		
		public Route()
		{
			this._Alarms = new EntitySet<Alarm>(new Action<Alarm>(this.attach_Alarms), new Action<Alarm>(this.detach_Alarms));
			this._Channels = new EntitySet<Channel>(new Action<Channel>(this.attach_Channels), new Action<Channel>(this.detach_Channels));
			this._LongRecords = new EntitySet<LongRecord>(new Action<LongRecord>(this.attach_LongRecords), new Action<LongRecord>(this.detach_LongRecords));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._Dest = default(EntityRef<Dest>);
			this._Instruction = default(EntityRef<Instruction>);
			this._OPM = default(EntityRef<OPM>);
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Protocol", DbType="Int")]
		public System.Nullable<int> Protocol
		{
			get
			{
				return this._Protocol;
			}
			set
			{
				if ((this._Protocol != value))
				{
					this.OnProtocolChanging(value);
					this.SendPropertyChanging();
					this._Protocol = value;
					this.SendPropertyChanged("Protocol");
					this.OnProtocolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteName", DbType="NVarChar(30)")]
		public string RouteName
		{
			get
			{
				return this._RouteName;
			}
			set
			{
				if ((this._RouteName != value))
				{
					this.OnRouteNameChanging(value);
					this.SendPropertyChanging();
					this._RouteName = value;
					this.SendPropertyChanged("RouteName");
					this.OnRouteNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TGNO", DbType="NVarChar(20)")]
		public string TGNO
		{
			get
			{
				return this._TGNO;
			}
			set
			{
				if ((this._TGNO != value))
				{
					this.OnTGNOChanging(value);
					this.SendPropertyChanging();
					this._TGNO = value;
					this.SendPropertyChanged("TGNO");
					this.OnTGNOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructionID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> InstructionID
		{
			get
			{
				return this._InstructionID;
			}
			set
			{
				if ((this._InstructionID != value))
				{
					if (this._Instruction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstructionIDChanging(value);
					this.SendPropertyChanging();
					this._InstructionID = value;
					this.SendPropertyChanged("InstructionID");
					this.OnInstructionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSignaling", DbType="Bit")]
		public System.Nullable<bool> IsSignaling
		{
			get
			{
				return this._IsSignaling;
			}
			set
			{
				if ((this._IsSignaling != value))
				{
					this.OnIsSignalingChanging(value);
					this.SendPropertyChanging();
					this._IsSignaling = value;
					this.SendPropertyChanged("IsSignaling");
					this.OnIsSignalingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OPMID", DbType="Int")]
		public System.Nullable<int> OPMID
		{
			get
			{
				return this._OPMID;
			}
			set
			{
				if ((this._OPMID != value))
				{
					if (this._OPM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOPMIDChanging(value);
					this.SendPropertyChanging();
					this._OPMID = value;
					this.SendPropertyChanged("OPMID");
					this.OnOPMIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsImported", DbType="Bit")]
		public System.Nullable<bool> IsImported
		{
			get
			{
				return this._IsImported;
			}
			set
			{
				if ((this._IsImported != value))
				{
					this.OnIsImportedChanging(value);
					this.SendPropertyChanging();
					this._IsImported = value;
					this.SendPropertyChanged("IsImported");
					this.OnIsImportedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceCenter", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SourceCenter
		{
			get
			{
				return this._SourceCenter;
			}
			set
			{
				if ((this._SourceCenter != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceCenterChanging(value);
					this.SendPropertyChanging();
					this._SourceCenter = value;
					this.SendPropertyChanged("SourceCenter");
					this.OnSourceCenterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DestID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> DestID
		{
			get
			{
				return this._DestID;
			}
			set
			{
				if ((this._DestID != value))
				{
					if (this._Dest.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDestIDChanging(value);
					this.SendPropertyChanging();
					this._DestID = value;
					this.SendPropertyChanged("DestID");
					this.OnDestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Alarm", Storage="_Alarms", ThisKey="ID", OtherKey="RouteID")]
		public EntitySet<Alarm> Alarms
		{
			get
			{
				return this._Alarms;
			}
			set
			{
				this._Alarms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Channel", Storage="_Channels", ThisKey="ID", OtherKey="RouteID")]
		public EntitySet<Channel> Channels
		{
			get
			{
				return this._Channels;
			}
			set
			{
				this._Channels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_LongRecord", Storage="_LongRecords", ThisKey="ID", OtherKey="RouteID")]
		public EntitySet<LongRecord> LongRecords
		{
			get
			{
				return this._LongRecords;
			}
			set
			{
				this._LongRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Task", Storage="_Tasks", ThisKey="ID", OtherKey="RouteID")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Dest_Route", Storage="_Dest", ThisKey="DestID", OtherKey="ID", IsForeignKey=true)]
		public Dest Dest
		{
			get
			{
				return this._Dest.Entity;
			}
			set
			{
				Dest previousValue = this._Dest.Entity;
				if (((previousValue != value) 
							|| (this._Dest.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Dest.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._Dest.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._DestID = value.ID;
					}
					else
					{
						this._DestID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Dest");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Instruction_Route", Storage="_Instruction", ThisKey="InstructionID", OtherKey="ID", IsForeignKey=true)]
		public Instruction Instruction
		{
			get
			{
				return this._Instruction.Entity;
			}
			set
			{
				Instruction previousValue = this._Instruction.Entity;
				if (((previousValue != value) 
							|| (this._Instruction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Instruction.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._Instruction.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._InstructionID = value.ID;
					}
					else
					{
						this._InstructionID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Instruction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OPM_Route", Storage="_OPM", ThisKey="OPMID", OtherKey="ID", IsForeignKey=true)]
		public OPM OPM
		{
			get
			{
				return this._OPM.Entity;
			}
			set
			{
				OPM previousValue = this._OPM.Entity;
				if (((previousValue != value) 
							|| (this._OPM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OPM.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._OPM.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._OPMID = value.ID;
					}
					else
					{
						this._OPMID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OPM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_Route", Storage="_Center", ThisKey="SourceCenter", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.Routes.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.Routes.Add(this);
						this._SourceCenter = value.ID;
					}
					else
					{
						this._SourceCenter = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Alarms(Alarm entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Alarms(Alarm entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Channels(Channel entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_LongRecords(LongRecord entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_LongRecords(LongRecord entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Route = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Route = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sensor")]
	public partial class Sensor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<byte> _TypeID;
		
		private System.Nullable<int> _ModulNumber;
		
		private System.Nullable<System.Guid> _RoomID;
		
		private string _Title;
		
		private System.Nullable<double> _Max;
		
		private System.Nullable<double> _Min;
		
		private EntitySet<CircuitLink> _CircuitLinks;
		
		private EntitySet<SensorData> _SensorDatas;
		
		private EntityRef<Room> _Room;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(System.Nullable<byte> value);
    partial void OnTypeIDChanged();
    partial void OnModulNumberChanging(System.Nullable<int> value);
    partial void OnModulNumberChanged();
    partial void OnRoomIDChanging(System.Nullable<System.Guid> value);
    partial void OnRoomIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnMaxChanging(System.Nullable<double> value);
    partial void OnMaxChanged();
    partial void OnMinChanging(System.Nullable<double> value);
    partial void OnMinChanged();
    #endregion
		
		public Sensor()
		{
			this._CircuitLinks = new EntitySet<CircuitLink>(new Action<CircuitLink>(this.attach_CircuitLinks), new Action<CircuitLink>(this.detach_CircuitLinks));
			this._SensorDatas = new EntitySet<SensorData>(new Action<SensorData>(this.attach_SensorDatas), new Action<SensorData>(this.detach_SensorDatas));
			this._Room = default(EntityRef<Room>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="TinyInt")]
		public System.Nullable<byte> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModulNumber", DbType="Int")]
		public System.Nullable<int> ModulNumber
		{
			get
			{
				return this._ModulNumber;
			}
			set
			{
				if ((this._ModulNumber != value))
				{
					this.OnModulNumberChanging(value);
					this.SendPropertyChanging();
					this._ModulNumber = value;
					this.SendPropertyChanged("ModulNumber");
					this.OnModulNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Max", DbType="Float")]
		public System.Nullable<double> Max
		{
			get
			{
				return this._Max;
			}
			set
			{
				if ((this._Max != value))
				{
					this.OnMaxChanging(value);
					this.SendPropertyChanging();
					this._Max = value;
					this.SendPropertyChanged("Max");
					this.OnMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Min", DbType="Float")]
		public System.Nullable<double> Min
		{
			get
			{
				return this._Min;
			}
			set
			{
				if ((this._Min != value))
				{
					this.OnMinChanging(value);
					this.SendPropertyChanging();
					this._Min = value;
					this.SendPropertyChanged("Min");
					this.OnMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sensor_CircuitLink", Storage="_CircuitLinks", ThisKey="ID", OtherKey="CircuitID")]
		public EntitySet<CircuitLink> CircuitLinks
		{
			get
			{
				return this._CircuitLinks;
			}
			set
			{
				this._CircuitLinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sensor_SensorData", Storage="_SensorDatas", ThisKey="ID", OtherKey="SensorID")]
		public EntitySet<SensorData> SensorDatas
		{
			get
			{
				return this._SensorDatas;
			}
			set
			{
				this._SensorDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Sensor", Storage="_Room", ThisKey="RoomID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Sensors.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Sensors.Add(this);
						this._RoomID = value.ID;
					}
					else
					{
						this._RoomID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CircuitLinks(CircuitLink entity)
		{
			this.SendPropertyChanging();
			entity.Sensor = this;
		}
		
		private void detach_CircuitLinks(CircuitLink entity)
		{
			this.SendPropertyChanging();
			entity.Sensor = null;
		}
		
		private void attach_SensorDatas(SensorData entity)
		{
			this.SendPropertyChanging();
			entity.Sensor = this;
		}
		
		private void detach_SensorDatas(SensorData entity)
		{
			this.SendPropertyChanging();
			entity.Sensor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SensorData")]
	public partial class SensorData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _SensorID;
		
		private System.DateTime _Date;
		
		private double _Value;
		
		private EntityRef<Sensor> _Sensor;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnSensorIDChanging(System.Guid value);
    partial void OnSensorIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnValueChanging(double value);
    partial void OnValueChanged();
    #endregion
		
		public SensorData()
		{
			this._Sensor = default(EntityRef<Sensor>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SensorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SensorID
		{
			get
			{
				return this._SensorID;
			}
			set
			{
				if ((this._SensorID != value))
				{
					if (this._Sensor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSensorIDChanging(value);
					this.SendPropertyChanging();
					this._SensorID = value;
					this.SendPropertyChanged("SensorID");
					this.OnSensorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sensor_SensorData", Storage="_Sensor", ThisKey="SensorID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Sensor Sensor
		{
			get
			{
				return this._Sensor.Entity;
			}
			set
			{
				Sensor previousValue = this._Sensor.Entity;
				if (((previousValue != value) 
							|| (this._Sensor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sensor.Entity = null;
						previousValue.SensorDatas.Remove(this);
					}
					this._Sensor.Entity = value;
					if ((value != null))
					{
						value.SensorDatas.Add(this);
						this._SensorID = value.ID;
					}
					else
					{
						this._SensorID = default(System.Guid);
					}
					this.SendPropertyChanged("Sensor");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceState")]
	public partial class ServiceState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CenterID;
		
		private int _ServiceType;
		
		private System.DateTime _LastActiveTime;
		
		private string _Description;
		
		private string _TechnicalReport;
		
		private System.Nullable<int> _InActiveSeconds;
		
		private string _Version;
		
		private System.Nullable<System.DateTime> _UpgradeTime;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCenterIDChanging(System.Guid value);
    partial void OnCenterIDChanged();
    partial void OnServiceTypeChanging(int value);
    partial void OnServiceTypeChanged();
    partial void OnLastActiveTimeChanging(System.DateTime value);
    partial void OnLastActiveTimeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTechnicalReportChanging(string value);
    partial void OnTechnicalReportChanged();
    partial void OnInActiveSecondsChanging(System.Nullable<int> value);
    partial void OnInActiveSecondsChanged();
    partial void OnVersionChanging(string value);
    partial void OnVersionChanged();
    partial void OnUpgradeTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnUpgradeTimeChanged();
    #endregion
		
		public ServiceState()
		{
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceType", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ServiceType
		{
			get
			{
				return this._ServiceType;
			}
			set
			{
				if ((this._ServiceType != value))
				{
					this.OnServiceTypeChanging(value);
					this.SendPropertyChanging();
					this._ServiceType = value;
					this.SendPropertyChanged("ServiceType");
					this.OnServiceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActiveTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastActiveTime
		{
			get
			{
				return this._LastActiveTime;
			}
			set
			{
				if ((this._LastActiveTime != value))
				{
					this.OnLastActiveTimeChanging(value);
					this.SendPropertyChanging();
					this._LastActiveTime = value;
					this.SendPropertyChanged("LastActiveTime");
					this.OnLastActiveTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnicalReport", DbType="VarChar(MAX)")]
		public string TechnicalReport
		{
			get
			{
				return this._TechnicalReport;
			}
			set
			{
				if ((this._TechnicalReport != value))
				{
					this.OnTechnicalReportChanging(value);
					this.SendPropertyChanging();
					this._TechnicalReport = value;
					this.SendPropertyChanged("TechnicalReport");
					this.OnTechnicalReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InActiveSeconds", AutoSync=AutoSync.Always, DbType="Int", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> InActiveSeconds
		{
			get
			{
				return this._InActiveSeconds;
			}
			set
			{
				if ((this._InActiveSeconds != value))
				{
					this.OnInActiveSecondsChanging(value);
					this.SendPropertyChanging();
					this._InActiveSeconds = value;
					this.SendPropertyChanged("InActiveSeconds");
					this.OnInActiveSecondsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="VarChar(25)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpgradeTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpgradeTime
		{
			get
			{
				return this._UpgradeTime;
			}
			set
			{
				if ((this._UpgradeTime != value))
				{
					this.OnUpgradeTimeChanging(value);
					this.SendPropertyChanging();
					this._UpgradeTime = value;
					this.SendPropertyChanged("UpgradeTime");
					this.OnUpgradeTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_ServiceState", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.ServiceStates.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.ServiceStates.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(System.Guid);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shelf")]
	public partial class Shelf : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _Type;
		
		private System.Guid _RackID;
		
		private string _Name;
		
		private System.Nullable<int> _Position;
		
		private EntitySet<Card> _Cards;
		
		private EntityRef<Rack> _Rack;
		
		private EntityRef<ShelfType> _ShelfType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnTypeChanging(System.Guid value);
    partial void OnTypeChanged();
    partial void OnRackIDChanging(System.Guid value);
    partial void OnRackIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(System.Nullable<int> value);
    partial void OnPositionChanged();
    #endregion
		
		public Shelf()
		{
			this._Cards = new EntitySet<Card>(new Action<Card>(this.attach_Cards), new Action<Card>(this.detach_Cards));
			this._Rack = default(EntityRef<Rack>);
			this._ShelfType = default(EntityRef<ShelfType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._ShelfType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RackID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RackID
		{
			get
			{
				return this._RackID;
			}
			set
			{
				if ((this._RackID != value))
				{
					if (this._Rack.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRackIDChanging(value);
					this.SendPropertyChanging();
					this._RackID = value;
					this.SendPropertyChanged("RackID");
					this.OnRackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int")]
		public System.Nullable<int> Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Shelf_Card", Storage="_Cards", ThisKey="ID", OtherKey="ShelfID")]
		public EntitySet<Card> Cards
		{
			get
			{
				return this._Cards;
			}
			set
			{
				this._Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rack_Shelf", Storage="_Rack", ThisKey="RackID", OtherKey="ID", IsForeignKey=true)]
		public Rack Rack
		{
			get
			{
				return this._Rack.Entity;
			}
			set
			{
				Rack previousValue = this._Rack.Entity;
				if (((previousValue != value) 
							|| (this._Rack.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rack.Entity = null;
						previousValue.Shelfs.Remove(this);
					}
					this._Rack.Entity = value;
					if ((value != null))
					{
						value.Shelfs.Add(this);
						this._RackID = value.ID;
					}
					else
					{
						this._RackID = default(System.Guid);
					}
					this.SendPropertyChanged("Rack");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShelfType_Shelf", Storage="_ShelfType", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
		public ShelfType ShelfType
		{
			get
			{
				return this._ShelfType.Entity;
			}
			set
			{
				ShelfType previousValue = this._ShelfType.Entity;
				if (((previousValue != value) 
							|| (this._ShelfType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShelfType.Entity = null;
						previousValue.Shelfs.Remove(this);
					}
					this._ShelfType.Entity = value;
					if ((value != null))
					{
						value.Shelfs.Add(this);
						this._Type = value.ID;
					}
					else
					{
						this._Type = default(System.Guid);
					}
					this.SendPropertyChanged("ShelfType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.Shelf = this;
		}
		
		private void detach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.Shelf = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShelfCardType")]
	public partial class ShelfCardType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ShelfTypeID;
		
		private System.Guid _CardTypeID;
		
		private EntityRef<CardType> _CardType;
		
		private EntityRef<ShelfType> _ShelfType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShelfTypeIDChanging(System.Guid value);
    partial void OnShelfTypeIDChanged();
    partial void OnCardTypeIDChanging(System.Guid value);
    partial void OnCardTypeIDChanged();
    #endregion
		
		public ShelfCardType()
		{
			this._CardType = default(EntityRef<CardType>);
			this._ShelfType = default(EntityRef<ShelfType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShelfTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ShelfTypeID
		{
			get
			{
				return this._ShelfTypeID;
			}
			set
			{
				if ((this._ShelfTypeID != value))
				{
					if (this._ShelfType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShelfTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ShelfTypeID = value;
					this.SendPropertyChanged("ShelfTypeID");
					this.OnShelfTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardTypeID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CardTypeID
		{
			get
			{
				return this._CardTypeID;
			}
			set
			{
				if ((this._CardTypeID != value))
				{
					if (this._CardType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CardTypeID = value;
					this.SendPropertyChanged("CardTypeID");
					this.OnCardTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardType_ShelfCardType", Storage="_CardType", ThisKey="CardTypeID", OtherKey="ID", IsForeignKey=true)]
		public CardType CardType
		{
			get
			{
				return this._CardType.Entity;
			}
			set
			{
				CardType previousValue = this._CardType.Entity;
				if (((previousValue != value) 
							|| (this._CardType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CardType.Entity = null;
						previousValue.ShelfCardTypes.Remove(this);
					}
					this._CardType.Entity = value;
					if ((value != null))
					{
						value.ShelfCardTypes.Add(this);
						this._CardTypeID = value.ID;
					}
					else
					{
						this._CardTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("CardType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShelfType_ShelfCardType", Storage="_ShelfType", ThisKey="ShelfTypeID", OtherKey="ID", IsForeignKey=true)]
		public ShelfType ShelfType
		{
			get
			{
				return this._ShelfType.Entity;
			}
			set
			{
				ShelfType previousValue = this._ShelfType.Entity;
				if (((previousValue != value) 
							|| (this._ShelfType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ShelfType.Entity = null;
						previousValue.ShelfCardTypes.Remove(this);
					}
					this._ShelfType.Entity = value;
					if ((value != null))
					{
						value.ShelfCardTypes.Add(this);
						this._ShelfTypeID = value.ID;
					}
					else
					{
						this._ShelfTypeID = default(System.Guid);
					}
					this.SendPropertyChanged("ShelfType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ShelfType")]
	public partial class ShelfType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private System.Guid _SupportingSwitch;
		
		private System.Nullable<int> _Capacity;
		
		private EntitySet<RackShelf> _RackShelfs;
		
		private EntitySet<Shelf> _Shelfs;
		
		private EntitySet<ShelfCardType> _ShelfCardTypes;
		
		private EntityRef<SwitchType> _SwitchType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSupportingSwitchChanging(System.Guid value);
    partial void OnSupportingSwitchChanged();
    partial void OnCapacityChanging(System.Nullable<int> value);
    partial void OnCapacityChanged();
    #endregion
		
		public ShelfType()
		{
			this._RackShelfs = new EntitySet<RackShelf>(new Action<RackShelf>(this.attach_RackShelfs), new Action<RackShelf>(this.detach_RackShelfs));
			this._Shelfs = new EntitySet<Shelf>(new Action<Shelf>(this.attach_Shelfs), new Action<Shelf>(this.detach_Shelfs));
			this._ShelfCardTypes = new EntitySet<ShelfCardType>(new Action<ShelfCardType>(this.attach_ShelfCardTypes), new Action<ShelfCardType>(this.detach_ShelfCardTypes));
			this._SwitchType = default(EntityRef<SwitchType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupportingSwitch", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SupportingSwitch
		{
			get
			{
				return this._SupportingSwitch;
			}
			set
			{
				if ((this._SupportingSwitch != value))
				{
					if (this._SwitchType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSupportingSwitchChanging(value);
					this.SendPropertyChanging();
					this._SupportingSwitch = value;
					this.SendPropertyChanged("SupportingSwitch");
					this.OnSupportingSwitchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int")]
		public System.Nullable<int> Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShelfType_RackShelf", Storage="_RackShelfs", ThisKey="ID", OtherKey="ShelfTypeID")]
		public EntitySet<RackShelf> RackShelfs
		{
			get
			{
				return this._RackShelfs;
			}
			set
			{
				this._RackShelfs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShelfType_Shelf", Storage="_Shelfs", ThisKey="ID", OtherKey="Type")]
		public EntitySet<Shelf> Shelfs
		{
			get
			{
				return this._Shelfs;
			}
			set
			{
				this._Shelfs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ShelfType_ShelfCardType", Storage="_ShelfCardTypes", ThisKey="ID", OtherKey="ShelfTypeID")]
		public EntitySet<ShelfCardType> ShelfCardTypes
		{
			get
			{
				return this._ShelfCardTypes;
			}
			set
			{
				this._ShelfCardTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_ShelfType", Storage="_SwitchType", ThisKey="SupportingSwitch", OtherKey="ID", IsForeignKey=true)]
		public SwitchType SwitchType
		{
			get
			{
				return this._SwitchType.Entity;
			}
			set
			{
				SwitchType previousValue = this._SwitchType.Entity;
				if (((previousValue != value) 
							|| (this._SwitchType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SwitchType.Entity = null;
						previousValue.ShelfTypes.Remove(this);
					}
					this._SwitchType.Entity = value;
					if ((value != null))
					{
						value.ShelfTypes.Add(this);
						this._SupportingSwitch = value.ID;
					}
					else
					{
						this._SupportingSwitch = default(System.Guid);
					}
					this.SendPropertyChanged("SwitchType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RackShelfs(RackShelf entity)
		{
			this.SendPropertyChanging();
			entity.ShelfType = this;
		}
		
		private void detach_RackShelfs(RackShelf entity)
		{
			this.SendPropertyChanging();
			entity.ShelfType = null;
		}
		
		private void attach_Shelfs(Shelf entity)
		{
			this.SendPropertyChanging();
			entity.ShelfType = this;
		}
		
		private void detach_Shelfs(Shelf entity)
		{
			this.SendPropertyChanging();
			entity.ShelfType = null;
		}
		
		private void attach_ShelfCardTypes(ShelfCardType entity)
		{
			this.SendPropertyChanging();
			entity.ShelfType = this;
		}
		
		private void detach_ShelfCardTypes(ShelfCardType entity)
		{
			this.SendPropertyChanging();
			entity.ShelfType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Shift")]
	public partial class Shift : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<System.TimeSpan> _StartTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnStartTimeChanged();
    #endregion
		
		public Shift()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SpareCard")]
	public partial class SpareCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _CenterID;
		
		private System.Nullable<System.Guid> _TypeID;
		
		private System.Nullable<int> _Count;
		
		private string _Description;
		
		private EntityRef<CardType> _CardType;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCenterIDChanging(System.Nullable<System.Guid> value);
    partial void OnCenterIDChanged();
    partial void OnTypeIDChanging(System.Nullable<System.Guid> value);
    partial void OnTypeIDChanged();
    partial void OnCountChanging(System.Nullable<int> value);
    partial void OnCountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SpareCard()
		{
			this._CardType = default(EntityRef<CardType>);
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._CardType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int")]
		public System.Nullable<int> Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardType_SpareCard", Storage="_CardType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public CardType CardType
		{
			get
			{
				return this._CardType.Entity;
			}
			set
			{
				CardType previousValue = this._CardType.Entity;
				if (((previousValue != value) 
							|| (this._CardType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CardType.Entity = null;
						previousValue.SpareCards.Remove(this);
					}
					this._CardType.Entity = value;
					if ((value != null))
					{
						value.SpareCards.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("CardType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_SpareCard", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.SpareCards.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.SpareCards.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SwitchType")]
	public partial class SwitchType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Company;
		
		private EntitySet<AlarmSeverityOverride> _AlarmSeverityOverrides;
		
		private EntitySet<CardType> _CardTypes;
		
		private EntitySet<Center> _Centers;
		
		private EntitySet<RackType> _RackTypes;
		
		private EntitySet<ReportType> _ReportTypes;
		
		private EntitySet<ShelfType> _ShelfTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    #endregion
		
		public SwitchType()
		{
			this._AlarmSeverityOverrides = new EntitySet<AlarmSeverityOverride>(new Action<AlarmSeverityOverride>(this.attach_AlarmSeverityOverrides), new Action<AlarmSeverityOverride>(this.detach_AlarmSeverityOverrides));
			this._CardTypes = new EntitySet<CardType>(new Action<CardType>(this.attach_CardTypes), new Action<CardType>(this.detach_CardTypes));
			this._Centers = new EntitySet<Center>(new Action<Center>(this.attach_Centers), new Action<Center>(this.detach_Centers));
			this._RackTypes = new EntitySet<RackType>(new Action<RackType>(this.attach_RackTypes), new Action<RackType>(this.detach_RackTypes));
			this._ReportTypes = new EntitySet<ReportType>(new Action<ReportType>(this.attach_ReportTypes), new Action<ReportType>(this.detach_ReportTypes));
			this._ShelfTypes = new EntitySet<ShelfType>(new Action<ShelfType>(this.attach_ShelfTypes), new Action<ShelfType>(this.detach_ShelfTypes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="NChar(50)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_AlarmSeverityOverride", Storage="_AlarmSeverityOverrides", ThisKey="ID", OtherKey="SwitchTypeID")]
		public EntitySet<AlarmSeverityOverride> AlarmSeverityOverrides
		{
			get
			{
				return this._AlarmSeverityOverrides;
			}
			set
			{
				this._AlarmSeverityOverrides.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_CardType", Storage="_CardTypes", ThisKey="ID", OtherKey="SupportingSwitch")]
		public EntitySet<CardType> CardTypes
		{
			get
			{
				return this._CardTypes;
			}
			set
			{
				this._CardTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_Center", Storage="_Centers", ThisKey="ID", OtherKey="Switch")]
		public EntitySet<Center> Centers
		{
			get
			{
				return this._Centers;
			}
			set
			{
				this._Centers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_RackType", Storage="_RackTypes", ThisKey="ID", OtherKey="SupportingSwitch")]
		public EntitySet<RackType> RackTypes
		{
			get
			{
				return this._RackTypes;
			}
			set
			{
				this._RackTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_ReportType", Storage="_ReportTypes", ThisKey="ID", OtherKey="SwitchTypeID")]
		public EntitySet<ReportType> ReportTypes
		{
			get
			{
				return this._ReportTypes;
			}
			set
			{
				this._ReportTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SwitchType_ShelfType", Storage="_ShelfTypes", ThisKey="ID", OtherKey="SupportingSwitch")]
		public EntitySet<ShelfType> ShelfTypes
		{
			get
			{
				return this._ShelfTypes;
			}
			set
			{
				this._ShelfTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AlarmSeverityOverrides(AlarmSeverityOverride entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = this;
		}
		
		private void detach_AlarmSeverityOverrides(AlarmSeverityOverride entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = null;
		}
		
		private void attach_CardTypes(CardType entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = this;
		}
		
		private void detach_CardTypes(CardType entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = null;
		}
		
		private void attach_Centers(Center entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = this;
		}
		
		private void detach_Centers(Center entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = null;
		}
		
		private void attach_RackTypes(RackType entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = this;
		}
		
		private void detach_RackTypes(RackType entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = null;
		}
		
		private void attach_ReportTypes(ReportType entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = this;
		}
		
		private void detach_ReportTypes(ReportType entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = null;
		}
		
		private void attach_ShelfTypes(ShelfType entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = this;
		}
		
		private void detach_ShelfTypes(ShelfType entity)
		{
			this.SendPropertyChanging();
			entity.SwitchType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _Definer;
		
		private System.Nullable<System.Guid> _Type;
		
		private System.Nullable<System.DateTime> _DueDate;
		
		private System.Nullable<System.DateTime> _FinishDate;
		
		private System.Nullable<bool> _IsDone;
		
		private string _Comment;
		
		private System.Nullable<int> _Shift;
		
		private System.Nullable<System.Guid> _RouteID;
		
		private System.Nullable<long> _ChannelCount;
		
		private EntityRef<Route> _Route;
		
		private EntityRef<TaskType> _TaskType;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnDefinerChanging(System.Nullable<System.Guid> value);
    partial void OnDefinerChanged();
    partial void OnTypeChanging(System.Nullable<System.Guid> value);
    partial void OnTypeChanged();
    partial void OnDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDueDateChanged();
    partial void OnFinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishDateChanged();
    partial void OnIsDoneChanging(System.Nullable<bool> value);
    partial void OnIsDoneChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnShiftChanging(System.Nullable<int> value);
    partial void OnShiftChanged();
    partial void OnRouteIDChanging(System.Nullable<System.Guid> value);
    partial void OnRouteIDChanged();
    partial void OnChannelCountChanging(System.Nullable<long> value);
    partial void OnChannelCountChanged();
    #endregion
		
		public Task()
		{
			this._Route = default(EntityRef<Route>);
			this._TaskType = default(EntityRef<TaskType>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Definer", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Definer
		{
			get
			{
				return this._Definer;
			}
			set
			{
				if ((this._Definer != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDefinerChanging(value);
					this.SendPropertyChanging();
					this._Definer = value;
					this.SendPropertyChanged("Definer");
					this.OnDefinerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					if (this._TaskType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishDate
		{
			get
			{
				return this._FinishDate;
			}
			set
			{
				if ((this._FinishDate != value))
				{
					this.OnFinishDateChanging(value);
					this.SendPropertyChanging();
					this._FinishDate = value;
					this.SendPropertyChanged("FinishDate");
					this.OnFinishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDone", DbType="Bit")]
		public System.Nullable<bool> IsDone
		{
			get
			{
				return this._IsDone;
			}
			set
			{
				if ((this._IsDone != value))
				{
					this.OnIsDoneChanging(value);
					this.SendPropertyChanging();
					this._IsDone = value;
					this.SendPropertyChanged("IsDone");
					this.OnIsDoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shift", DbType="Int")]
		public System.Nullable<int> Shift
		{
			get
			{
				return this._Shift;
			}
			set
			{
				if ((this._Shift != value))
				{
					this.OnShiftChanging(value);
					this.SendPropertyChanging();
					this._Shift = value;
					this.SendPropertyChanged("Shift");
					this.OnShiftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RouteID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RouteID
		{
			get
			{
				return this._RouteID;
			}
			set
			{
				if ((this._RouteID != value))
				{
					if (this._Route.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRouteIDChanging(value);
					this.SendPropertyChanging();
					this._RouteID = value;
					this.SendPropertyChanged("RouteID");
					this.OnRouteIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChannelCount", DbType="BigInt")]
		public System.Nullable<long> ChannelCount
		{
			get
			{
				return this._ChannelCount;
			}
			set
			{
				if ((this._ChannelCount != value))
				{
					this.OnChannelCountChanging(value);
					this.SendPropertyChanging();
					this._ChannelCount = value;
					this.SendPropertyChanged("ChannelCount");
					this.OnChannelCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Route_Task", Storage="_Route", ThisKey="RouteID", OtherKey="ID", IsForeignKey=true)]
		public Route Route
		{
			get
			{
				return this._Route.Entity;
			}
			set
			{
				Route previousValue = this._Route.Entity;
				if (((previousValue != value) 
							|| (this._Route.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Route.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Route.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._RouteID = value.ID;
					}
					else
					{
						this._RouteID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Route");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskType_Task", Storage="_TaskType", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
		public TaskType TaskType
		{
			get
			{
				return this._TaskType.Entity;
			}
			set
			{
				TaskType previousValue = this._TaskType.Entity;
				if (((previousValue != value) 
							|| (this._TaskType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TaskType.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._TaskType.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._Type = value.ID;
					}
					else
					{
						this._Type = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TaskType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task", Storage="_User", ThisKey="Definer", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._Definer = value.ID;
					}
					else
					{
						this._Definer = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskType")]
	public partial class TaskType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TaskType()
		{
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TaskType_Task", Storage="_Tasks", ThisKey="ID", OtherKey="Type")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskType = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.TaskType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _UserName;
		
		private string _FullName;
		
		private string _Password;
		
		private System.Nullable<System.Guid> _CenterID;
		
		private EntityRef<AcknowledgeCenter> _AcknowledgeCenter;
		
		private EntitySet<UserShift> _UserShifts;
		
		private EntitySet<UserShift> _UserShifts1;
		
		private EntitySet<UserShift> _UserShifts2;
		
		private EntitySet<Alarm> _Alarms;
		
		private EntitySet<Event> _Events;
		
		private EntitySet<Instruction> _Instructions;
		
		private EntitySet<LongRecord> _LongRecords;
		
		private EntitySet<Report> _Reports;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<UserRoleRelation> _UserRoleRelations;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCenterIDChanging(System.Nullable<System.Guid> value);
    partial void OnCenterIDChanged();
    #endregion
		
		public User()
		{
			this._AcknowledgeCenter = default(EntityRef<AcknowledgeCenter>);
			this._UserShifts = new EntitySet<UserShift>(new Action<UserShift>(this.attach_UserShifts), new Action<UserShift>(this.detach_UserShifts));
			this._UserShifts1 = new EntitySet<UserShift>(new Action<UserShift>(this.attach_UserShifts1), new Action<UserShift>(this.detach_UserShifts1));
			this._UserShifts2 = new EntitySet<UserShift>(new Action<UserShift>(this.attach_UserShifts2), new Action<UserShift>(this.detach_UserShifts2));
			this._Alarms = new EntitySet<Alarm>(new Action<Alarm>(this.attach_Alarms), new Action<Alarm>(this.detach_Alarms));
			this._Events = new EntitySet<Event>(new Action<Event>(this.attach_Events), new Action<Event>(this.detach_Events));
			this._Instructions = new EntitySet<Instruction>(new Action<Instruction>(this.attach_Instructions), new Action<Instruction>(this.detach_Instructions));
			this._LongRecords = new EntitySet<LongRecord>(new Action<LongRecord>(this.attach_LongRecords), new Action<LongRecord>(this.detach_LongRecords));
			this._Reports = new EntitySet<Report>(new Action<Report>(this.attach_Reports), new Action<Report>(this.detach_Reports));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._UserRoleRelations = new EntitySet<UserRoleRelation>(new Action<UserRoleRelation>(this.attach_UserRoleRelations), new Action<UserRoleRelation>(this.detach_UserRoleRelations));
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AcknowledgeCenter", Storage="_AcknowledgeCenter", ThisKey="ID", OtherKey="CenterID", IsUnique=true, IsForeignKey=false)]
		public AcknowledgeCenter AcknowledgeCenter
		{
			get
			{
				return this._AcknowledgeCenter.Entity;
			}
			set
			{
				AcknowledgeCenter previousValue = this._AcknowledgeCenter.Entity;
				if (((previousValue != value) 
							|| (this._AcknowledgeCenter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcknowledgeCenter.Entity = null;
						previousValue.User = null;
					}
					this._AcknowledgeCenter.Entity = value;
					if ((value != null))
					{
						value.User = this;
					}
					this.SendPropertyChanged("AcknowledgeCenter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserShift", Storage="_UserShifts", ThisKey="ID", OtherKey="MorningUser")]
		public EntitySet<UserShift> UserShifts
		{
			get
			{
				return this._UserShifts;
			}
			set
			{
				this._UserShifts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserShift1", Storage="_UserShifts1", ThisKey="ID", OtherKey="AfterNoonUser")]
		public EntitySet<UserShift> UserShifts1
		{
			get
			{
				return this._UserShifts1;
			}
			set
			{
				this._UserShifts1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserShift2", Storage="_UserShifts2", ThisKey="ID", OtherKey="NightUser")]
		public EntitySet<UserShift> UserShifts2
		{
			get
			{
				return this._UserShifts2;
			}
			set
			{
				this._UserShifts2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Alarm", Storage="_Alarms", ThisKey="ID", OtherKey="Reporter")]
		public EntitySet<Alarm> Alarms
		{
			get
			{
				return this._Alarms;
			}
			set
			{
				this._Alarms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Event", Storage="_Events", ThisKey="ID", OtherKey="Reporter")]
		public EntitySet<Event> Events
		{
			get
			{
				return this._Events;
			}
			set
			{
				this._Events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Instruction", Storage="_Instructions", ThisKey="ID", OtherKey="Executer")]
		public EntitySet<Instruction> Instructions
		{
			get
			{
				return this._Instructions;
			}
			set
			{
				this._Instructions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_LongRecord", Storage="_LongRecords", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<LongRecord> LongRecords
		{
			get
			{
				return this._LongRecords;
			}
			set
			{
				this._LongRecords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Report", Storage="_Reports", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<Report> Reports
		{
			get
			{
				return this._Reports;
			}
			set
			{
				this._Reports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Task", Storage="_Tasks", ThisKey="ID", OtherKey="Definer")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRoleRelation", Storage="_UserRoleRelations", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserRoleRelation> UserRoleRelations
		{
			get
			{
				return this._UserRoleRelations;
			}
			set
			{
				this._UserRoleRelations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_User", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserShifts(UserShift entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserShifts(UserShift entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserShifts1(UserShift entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_UserShifts1(UserShift entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UserShifts2(UserShift entity)
		{
			this.SendPropertyChanging();
			entity.User2 = this;
		}
		
		private void detach_UserShifts2(UserShift entity)
		{
			this.SendPropertyChanging();
			entity.User2 = null;
		}
		
		private void attach_Alarms(Alarm entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Alarms(Alarm entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Events(Event entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Instructions(Instruction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Instructions(Instruction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LongRecords(LongRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LongRecords(LongRecord entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Reports(Report entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserRoleRelations(UserRoleRelation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserRoleRelations(UserRoleRelation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoleRelation")]
	public partial class UserRoleRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _RoleID;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(string value);
    partial void OnRoleIDChanged();
    #endregion
		
		public UserRoleRelation()
		{
			this._Role = default(EntityRef<Role>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_UserRoleRelation", Storage="_Role", ThisKey="RoleID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserRoleRelations.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserRoleRelations.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(string);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserRoleRelation", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserRoleRelations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserRoleRelations.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CenterContact")]
	public partial class CenterContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CenterID;
		
		private System.Guid _ContactID;
		
		private System.Nullable<int> _AlarmType;
		
		private EntityRef<Center> _Center;
		
		private EntityRef<Contact> _Contact;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCenterIDChanging(System.Guid value);
    partial void OnCenterIDChanged();
    partial void OnContactIDChanging(System.Guid value);
    partial void OnContactIDChanged();
    partial void OnAlarmTypeChanging(System.Nullable<int> value);
    partial void OnAlarmTypeChanged();
    #endregion
		
		public CenterContact()
		{
			this._Center = default(EntityRef<Center>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlarmType", DbType="Int")]
		public System.Nullable<int> AlarmType
		{
			get
			{
				return this._AlarmType;
			}
			set
			{
				if ((this._AlarmType != value))
				{
					this.OnAlarmTypeChanging(value);
					this.SendPropertyChanging();
					this._AlarmType = value;
					this.SendPropertyChanged("AlarmType");
					this.OnAlarmTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_CenterContact", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true)]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.CenterContacts.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.CenterContacts.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(System.Guid);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_CenterContact", Storage="_Contact", ThisKey="ContactID", OtherKey="ID", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.CenterContacts.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.CenterContacts.Add(this);
						this._ContactID = value.ID;
					}
					else
					{
						this._ContactID = default(System.Guid);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LogAlarm")]
	public partial class LogAlarm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Nullable<System.Guid> _CenterID;
		
		private System.Nullable<byte> _Severity;
		
		private string _Data;
		
		private System.DateTime _Time;
		
		private string _Title;
		
		private System.Nullable<bool> _IsRead;
		
		private string _Location;
		
		private System.Nullable<int> _MessageID;
		
		private EntityRef<Center> _Center;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCenterIDChanging(System.Nullable<System.Guid> value);
    partial void OnCenterIDChanged();
    partial void OnSeverityChanging(System.Nullable<byte> value);
    partial void OnSeverityChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsReadChanging(System.Nullable<bool> value);
    partial void OnIsReadChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnMessageIDChanging(System.Nullable<int> value);
    partial void OnMessageIDChanged();
    #endregion
		
		public LogAlarm()
		{
			this._Center = default(EntityRef<Center>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					if (this._Center.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Severity", DbType="TinyInt")]
		public System.Nullable<byte> Severity
		{
			get
			{
				return this._Severity;
			}
			set
			{
				if ((this._Severity != value))
				{
					this.OnSeverityChanging(value);
					this.SendPropertyChanging();
					this._Severity = value;
					this.SendPropertyChanged("Severity");
					this.OnSeverityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="NVarChar(MAX)")]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRead", DbType="Bit")]
		public System.Nullable<bool> IsRead
		{
			get
			{
				return this._IsRead;
			}
			set
			{
				if ((this._IsRead != value))
				{
					this.OnIsReadChanging(value);
					this.SendPropertyChanging();
					this._IsRead = value;
					this.SendPropertyChanged("IsRead");
					this.OnIsReadChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="VarChar(20)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MessageID", DbType="Int")]
		public System.Nullable<int> MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Center_LogAlarm", Storage="_Center", ThisKey="CenterID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Center Center
		{
			get
			{
				return this._Center.Entity;
			}
			set
			{
				Center previousValue = this._Center.Entity;
				if (((previousValue != value) 
							|| (this._Center.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Center.Entity = null;
						previousValue.LogAlarms.Remove(this);
					}
					this._Center.Entity = value;
					if ((value != null))
					{
						value.LogAlarms.Add(this);
						this._CenterID = value.ID;
					}
					else
					{
						this._CenterID = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Center");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _Name;
		
		private string _Position;
		
		private string _Number;
		
		private string _Description;
		
		private EntitySet<CenterContact> _CenterContacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Contact()
		{
			this._CenterContacts = new EntitySet<CenterContact>(new Action<CenterContact>(this.attach_CenterContacts), new Action<CenterContact>(this.detach_CenterContacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="NVarChar(50)")]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="NVarChar(50)")]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_CenterContact", Storage="_CenterContacts", ThisKey="ID", OtherKey="ContactID")]
		public EntitySet<CenterContact> CenterContacts
		{
			get
			{
				return this._CenterContacts;
			}
			set
			{
				this._CenterContacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CenterContacts(CenterContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_CenterContacts(CenterContact entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserLog")]
	public partial class UserLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _CenterID;
		
		private System.Guid _UserID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Action;
		
		private string _Description;
		
		private string _TechnicalReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCenterIDChanging(System.Guid value);
    partial void OnCenterIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTechnicalReportChanging(string value);
    partial void OnTechnicalReportChanged();
    #endregion
		
		public UserLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CenterID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CenterID
		{
			get
			{
				return this._CenterID;
			}
			set
			{
				if ((this._CenterID != value))
				{
					this.OnCenterIDChanging(value);
					this.SendPropertyChanging();
					this._CenterID = value;
					this.SendPropertyChanged("CenterID");
					this.OnCenterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NVarChar(50)")]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TechnicalReport", DbType="NVarChar(MAX)")]
		public string TechnicalReport
		{
			get
			{
				return this._TechnicalReport;
			}
			set
			{
				if ((this._TechnicalReport != value))
				{
					this.OnTechnicalReportChanging(value);
					this.SendPropertyChanging();
					this._TechnicalReport = value;
					this.SendPropertyChanged("TechnicalReport");
					this.OnTechnicalReportChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetInActiveSensorsResult
	{
		
		private string _Name;
		
		private System.Nullable<int> _ModulNumber;
		
		private string _Title;
		
		public GetInActiveSensorsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(30)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModulNumber", DbType="Int")]
		public System.Nullable<int> ModulNumber
		{
			get
			{
				return this._ModulNumber;
			}
			set
			{
				if ((this._ModulNumber != value))
				{
					this._ModulNumber = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
